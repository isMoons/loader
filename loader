local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/Knuxy92/Ui-linoria/main/Fluent/Fluent.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
Title = "Remoralz  Fisch ",
SubTitle = "By Tixxez",
TabWidth = 160,
Size = UDim2.fromOffset(550, 350),
Acrylic = false, 
Theme = "Aqua",
MinimizeKey = Enum.KeyCode.LeftControl
})

do 
Config = {

}
_G.Config = Config
AllFuncs = {}
Threads = getgenv().Threads
Players = game.Players
LocalPlayer = game.Players.LocalPlayer
Client = game.Players.LocalPlayer


-- \\ Module GetService // --

ReplicatedStorage = game:GetService('ReplicatedStorage')
RunService = game:GetService("RunService")
VirtualInputManager = game:GetService('VirtualInputManager')
CollectionService = game:GetService("CollectionService")
CoreGui = game:GetService("CoreGui")
HttpService = game:GetService("HttpService")
TeleportService = game:GetService("TeleportService")
VirtualUser = game:GetService("VirtualUser")
VirtualInputManager = game:GetService("VirtualInputManager")
UserInputService = game:GetService("UserInputService")


-- \\ Normal Module // --

PlayerGui = LocalPlayer.PlayerGui
Backpack = LocalPlayer.Backpack
request = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

Char = Client.Character
Character = Client.Character
if not Threads then getgenv().Threads = {} end

repeat 
LocalPlayer = Players.LocalPlayer
wait()
until LocalPlayer
end

function Notify(Des, Time, title)
Fluent:Notify({
Title= title or "Remoralz Notify",
Content = Des,
Duration = Time or 3
})
end

_G['Remoralz Table'] = {
isWindows = UserInputService:GetPlatform() == Enum.Platform.Windows,
TypeOs = (table.find({Enum.Platform.Windows}, game:GetService('UserInputService'):GetPlatform()) ~= nil and 'Pc') or 'Mb',
SizeUi = (not isWindows and UDim2.fromOffset(600,300)) or UDim2.fromOffset(560,600),
AutoSize = true,
TweenUiSize = true,
SpeedTweenUi = 0.25,
StyleTweenUi = Enum.EasingStyle.Quad,
Mutiply = 1.80,
SizeX = 550,
SafePercent = 20,

AnimationUiToggle = true,
}

_G['Remoralz Table'].SizeUi = (not _G['Remoralz Table'].isWindows and UDim2.fromOffset(600,300)) or UDim2.fromOffset(560,600)
if not _G['Remoralz Table'].isWindows then
if game.CoreGui:FindFirstChild('UIBUTTON') then
game.CoreGui:FindFirstChild('UIBUTTON'):Destroy()
end

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local UIBUTTON = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local ImageButton = Instance.new("ImageButton")
local UICorner = Instance.new("UICorner")
local UICorner_2 = Instance.new("UICorner")

UIBUTTON.Name = "UIBUTTON"
UIBUTTON.Parent = game.CoreGui
UIBUTTON.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = UIBUTTON
Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Transparency = 1
Frame.Position = UDim2.new(0.157012194, 0, 0.164366379, 0)
Frame.Size = UDim2.new(0, 115, 0, 49)

ImageButton.Parent = Frame
ImageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BorderSizePixel = 0
ImageButton.Active = true
ImageButton.Draggable = true
ImageButton.Position = UDim2.new(0.218742043, 0, -0.155235752, 0)
ImageButton.Size = UDim2.new(0, 64, 0, 64)

-- Set initial image to "open"
ImageButton.Image = "rbxassetid://136634905225382" -- Open image asset ID
local isOpen = true -- Variable to track the state

ImageButton.MouseButton1Click:Connect(function()
    -- Animate the button size
    ImageButton:TweenSize(UDim2.new(0, 60, 0, 60), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.1)
    delay(0.1, function()
        ImageButton:TweenSize(UDim2.new(0, 64, 0, 64), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.1)
    end)

    -- Toggle the image based on the state
    if isOpen then
        ImageButton.Image = "rbxassetid://134717468347051" -- Replace with close image asset ID
    else
        ImageButton.Image = "rbxassetid://136634905225382" -- Open image asset ID
    end
    isOpen = not isOpen -- Toggle the state

    -- Simulate key presses
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendKeyEvent(true,"RightControl",false,game)
    VirtualInputManager:SendKeyEvent(false,"RightControl",false,game)
    VirtualInputManager:SendKeyEvent(true,"LeftControl",false,game)
    VirtualInputManager:SendKeyEvent(false,"LeftControl",false,game)
end)

UICorner.CornerRadius = UDim.new(0, 100)
UICorner.Parent = ImageButton

UICorner_2.CornerRadius = UDim.new(0, 10)
UICorner_2.Parent = Frame


local UIS = game:GetService('UserInputService')
local frame = Frame
local dragToggle = nil
local dragSpeed = 0.25
local dragStart = nil
local startPos = nil

local function updateInput(input)
local delta = input.Position - dragStart
local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
startPos.Y.Scale, startPos.Y.Offset + delta.Y)
game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
end

frame.InputBegan:Connect(function(input)
if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
dragToggle = true
dragStart = input.Position
startPos = frame.Position
input.Changed:Connect(function()
if input.UserInputState == Enum.UserInputState.End then
dragToggle = false
end
end)
end
end)

UIS.InputChanged:Connect(function(input)
if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
if dragToggle then
Frame.Transparency = 1
updateInput(input)
else
Frame.Transparency = 1
end
end
end)
end

do -- Settings Initializer
local path = "Remoralz/fisch"
if not isfolder(path) then makefolder(path) end
DefaultConfigName = path.."/OriConfibg.json"
ConfigName = path.."/"..Client.UserId.."Config.json"
Config = isfile(ConfigName) and readfile(ConfigName)
DefaultConfig = isfile(DefaultConfigName) and readfile(DefaultConfigName)
if DefaultConfig then
if type(DefaultConfig) == "string" and DefaultConfig:find"{" then
local Success,Result
Success,Result = pcall(function()
return game:GetService("HttpService"):JSONDecode(DefaultConfig)
end)
wait(0.1)
if Success then
DefaultConfig = Result
else
DefaultConfig = nil
end
end
end
if isfile(tostring(Client.UserId).."ALC.txt") then
if readfile(tostring(Client.UserId).."ALC.txt") == "true"  then
if Config then
if type(Config) == "string" and Config:find"{" then
local Success,Result
Success,Result = pcall(function()
return game:GetService("HttpService"):JSONDecode(Config)
end)
wait(0.1)
if Success then
Config = Result
else
Config = {}
end
else
Config = {}
end
else
Config = {}
end
else
Config = {}
end
else
writefile(tostring(Client.UserId).."ALC.txt", "true")
Config = {}
end
if getgenv().Config then
Config = getgenv().Config
end
end

do -- Config Function
save = function()
if not isfolder('Remoralz') then
makefolder('Remoralz')
end
writefile(ConfigName,game:GetService("HttpService"):JSONEncode(Config))
end
setDefaultConfig = function()
if not isfolder('Remoralz') then
makefolder('Remoralz')
end
writefile(DefaultConfigName,game:GetService("HttpService"):JSONEncode(Config))
end
end

do -- INFO FISH
local fish = game:GetService("ReplicatedStorage"):WaitForChild("resources"):WaitForChild("animations"):WaitForChild("fish")
FISHDATA = {
Tire = {
WeightPool = {110, 110};
Chance = 17;
Rarity = "Trash";
Resilience = 130;
Description = "Who would leave this in an ocean? Seems to be in great condition too. A common tire for cars and pickup trucks.";
Hint = "Find it in cheap bodies of water.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 20;
XP = 10;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ermm..?", "A tire.?", "Who would put this in here?", "Oh. A tire.", "A tire!..?"};
SparkleColor = Color3.fromRGB(255, 255, 255);
From = "None";
};
Boot = {
WeightPool = {12, 12};
Chance = 17;
Rarity = "Trash";
Resilience = 120;
Description = "Who would leave this in an ocean? Seems to be in great condition too. A common boot, must of fallen off of a boat?.. Or someONE must of fallen off of a boat.. Whatever. either way, it's yours now!";
Hint = "Find it in cheap bodies of water.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 15;
XP = 20;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ermm..?", "Why only one..?", "A Boot.!", "A Boot...", "I caught!.. a Boot..?", "Erm.. A Boot?"};
SparkleColor = Color3.fromRGB(197, 152, 80);
From = "None";
};
["Fungal Cluster"] = {
WeightPool = {9, 9};
Chance = 22;
Rarity = "Trash";
Resilience = 120;
Description = "Offspring of the Giant Fungal Trees of Mushgrove Swamp. These mushrooms produce heavy spores which polute the surrounding area and sky; giving everything an uncomfortable and green feel.";
Hint = "Find it in Mushgrove Swamp. Gives off spores.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 9;
XP = 20;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ermm..?", "Hmm..?"};
SparkleColor = Color3.fromRGB(255, 0, 0);
HoldAnimation = fish:WaitForChild("underweight");
From = "Mushgrove";
};
Driftwood = {
WeightPool = {6, 6};
Chance = 17;
Rarity = "Trash";
Resilience = 120;
Description = "A wood that has been washed up onto the shore by the tides. Could be great for a crafts project!";
Hint = "Find it washed on beaches.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 10;
XP = 30;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ermm..?", "Uhmm..?", "Driftwood!", "Oh. Driftwood.", "It's!- Oh.. Driftwood..", "Driftwood.."};
SparkleColor = Color3.fromRGB(197, 107, 62);
HoldAnimation = fish:WaitForChild("tiny");
From = "None";
};
Seaweed = {
WeightPool = {1, 3};
Chance = 20;
Rarity = "Trash";
Resilience = 90;
Description = "Some lovely seaweed that caught your hook. Not as cool as a fish, but it's better than finding a lonesome boot!";
Hint = "Find it in saltwater or near patches of seaweed.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 9;
XP = 20;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ermm..?", "Uhmm..?", "Driftwood!", "Oh. Driftwood.", "It's!- Oh.. Driftwood..", "Driftwood.."};
SparkleColor = Color3.fromRGB(197, 107, 62);
HoldAnimation = fish:WaitForChild("tiny");
From = "None";
};
Log = {
WeightPool = {45, 75};
Chance = 10;
Rarity = "Trash";
Resilience = 80;
Description = "A large log of wood than must have drifted on to shore. Could be great for house projects!";
Hint = "Find it washed on beaches and in the ocean.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 124;
XP = 45;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Oh.. a Log!", "A.. Log?", "How did I pull this up?", "A Log..?"};
SparkleColor = Color3.fromRGB(255, 255, 255);
HoldAnimation = fish:WaitForChild("heavy");
From = "None";
};
Rock = {
WeightPool = {150, 210};
Chance = 50;
Rarity = "Trash";
Resilience = 90;
Description = "It's not a boulder.. It's a rock! Found in rocky bodies of water.";
Hint = "Found in rocky bodies of water.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 15;
XP = 10;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ermm..?", "Uhmm..?", "A Rock!", "Oh. A Rock.", "It's!- Oh.. A Rock..", "A rock.."};
SparkleColor = Color3.fromRGB(80, 80, 80);
HoldAnimation = fish:WaitForChild("tiny");
From = "None";
};
Ice = {
WeightPool = {40, 60};
Chance = 35;
Rarity = "Trash";
Resilience = 90;
Description = "Chunk of ice that broke off from a glacier in Snowcap. Kinda fun to lick..";
Hint = "Found in frozen bodies of water.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 15;
XP = 10;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ermm..?", "Uhmm..?", "A block of Ice!", "Oh. Ice.", "Ouu! Let me lick it!", "Ice..", "It's not a popsicle, but it will do!"};
SparkleColor = Color3.fromRGB(171, 255, 245);
HoldAnimation = fish:WaitForChild("tiny");
From = "Snowcap";
};
Basalt = {
WeightPool = {150, 210};
Chance = 55;
Rarity = "Trash";
Resilience = 120;
Description = "Basalt, also known as Lava Rock, is an igneous volcanic rock that forms when molten lava cools and solidifies. Very common to find when in a volcanic area.";
Hint = "Found in active Volcanoes";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 15;
XP = 10;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ermm..?", "Uhmm..?", "Some Basalt!", "Oh. A Piece of Basalt.", "It's!- Oh.. Basalt..", "Basalt.."};
SparkleColor = Color3.fromRGB(59, 59, 59);
HoldAnimation = fish:WaitForChild("tiny");
From = "Roslit Volcano";
};
["Common Crate"] = {
WeightPool = {80, 80};
Chance = 17;
Rarity = "Uncommon";
Resilience = 120;
Description = "A moderately sized wooden crate seemingly lost from a fishing boat of some kind. The date of it's disappearance is unknown. Therefore, finders keepers?- Opening it might give you an array of fish, bait, and money!";
Hint = "Fallen off of a fishing boat.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
BuyMult = 1.6;
Price = 80;
XP = 20;
Seasons = {"None"};
Weather = {"None"};
Quips = {"A Common Crate!", "A Crate!", "Woah! A Crate!", "A Common Crate!", "Who left this here?"};
SparkleColor = Color3.fromRGB(255, 255, 255);
HoldAnimation = fish:WaitForChild("crate");
IsCrate = true;
CrateType = "All";
BaitContents = {"Shrimp", "Bagel", "Squid", "Seaweed", "Magnet", "Worm", "Minnow", "Flakes", "Insect", "Maggot", "Rapid Catcher"};
FishContents = {"Sockeye Salmon", "Trout", "Carp", "Minnow", "Mackerel", "Gudgeon", "Cod", "Haddock", "White Bass", "Sea Bass", "Chub", "Pumpkinseed"};
CoinContents = {40, 120};
From = "None";
};
["Carbon Crate"] = {
WeightPool = {160, 160};
Chance = 2;
Rarity = "Rare";
Resilience = 50;
Description = "A large military grade crate, lost from some sort of commercial fishing boat. The date of it's disappearance is unkown. Therefore, finders keepers?- Opening it might give you an array of fish, bait, and money!";
Hint = "Fallen off of a commercial fishing boat.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
BuyMult = 3.5;
Price = 140;
XP = 50;
Seasons = {"None"};
Weather = {"None"};
Quips = {"A Carbon Crate!", "A Crate!", "Woah! A Crate!", "A Carbon Crate!", "Who left this here?", "Where is this from??"};
SparkleColor = Color3.fromRGB(255, 255, 255);
HoldAnimation = fish:WaitForChild("crate");
IsCrate = true;
CrateType = "FishOrCoins";
FishContents = {"Alligator Gar", "Nurse Shark", "Ribbon Eel", "Eel", "White Bass", "Longtail Bass", "Yellowfin Tuna", "Bluefin Tuna", "Squid", "Lobster", "Cod", "Pike", "Barracuda", "Arapaima", "Amberjack", "Sturgeon", "Longtail Bass", "Squid", "Mahi Mahi", "Halibut", "Coelacanth", "Abyssacuda"};
CoinContents = {130, 400};
From = "None";
};
["Fish Barrel"] = {
WeightPool = {150, 150};
Chance = 12;
Rarity = "Uncommon";
Resilience = 110;
Description = "A large wooden barrel with iron hoops. The barrel filled with a large array of ocean and freshwater fish that all seem pretty fresh. Therefore, finders keeps?- Opening it might give you an assortment of fish";
Hint = "Fallen off of a fishing boat.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
Price = 80;
XP = 40;
Seasons = {"None"};
Weather = {"None"};
Quips = {"A Common Crate!", "A Crate!", "Woah! A Crate!", "A Common Crate!", "Who left this here?"};
SparkleColor = Color3.fromRGB(255, 255, 255);
HoldAnimation = fish:WaitForChild("crate");
From = "None";
IsCrate = true;
CrateType = "Fish";
FishContents = {"Sockeye Salmon", "Trout", "Bream", "Sturgeon", "Barracuda", "Carp", "Pufferfish", "Bluefin Tuna", "Yellowfin Tuna", "Sockeye Salmon", "Trout", "Bream", "Barracuda", "Carp", "Pike", "Alligator Gar", "Cod", "Minnow", "Longtail Bass", "Mahi Mahi", "Sardine", "Crab", "Amberjack", "Arapaima", "Perch", "Sea Bass", "Cod", "Haddock", "Sweetfish", "Goldfish", "Halibut", "Minnow", "Pale Tang", "Porgy", "Porgy", "White Bass", "Walleye", "Redeye Bass", "Sockeye Salmon", "Trout", "Bream", "Sturgeon", "Barracuda", "Carp", "Pufferfish", "Bluefin Tuna", "Yellowfin Tuna", "Sockeye Salmon", "Trout", "Bream", "Barracuda", "Carp", "Pike", "Alligator Gar", "Cod", "Minnow", "Longtail Bass", "Mahi Mahi", "Sardine", "Crab", "Amberjack", "Arapaima", "Perch", "Sea Bass", "Cod", "Haddock", "Sweetfish", "Goldfish", "Halibut", "Minnow", "Pale Tang", "Porgy", "Porgy", "White Bass", "Walleye", "Redeye Bass", "Golden Smallmouth Bass"};
};

["Bait Crate"] = {
WeightPool = {80, 80};
Chance = 15;
Rarity = "Uncommon";
Resilience = 120;
Description = "A wooden crate with fabric over top to preserve the bait inside. Seemingly lost from a fishing boat of some kind. The bait is still alive and fresh. Therefore, finders keepers?- Opening it might give you an array of common and rare baits!";
Hint = "Fallen off of a fishing boat.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
BuyMult = 1.6;
Price = 75;
XP = 40;
Seasons = {"None"};
Weather = {"None"};
Quips = {"A Crate of Bait!", "A Bait Crate!", "Woah! A Crate!", "A Crate!", "Who left this here?", "Oh, the shrimps still moving?", "A Crate full of Bait!"};
SparkleColor = Color3.fromRGB(255, 255, 255);
HoldAnimation = fish:WaitForChild("crate");
From = "None";
IsCrate = true;
CrateType = "Bait";
BaitContents = {"Shrimp", "Seaweed", "Bagel", "Squid", "Magnet", "Worm", "Minnow", "Flakes", "Insect", "Fish Head", "Rapid Catcher", "instant Catcher", "Super Flakes", "Maggot"};
};
["Quality Bait Crate"] = {
WeightPool = {120, 120};
Chance = 8;
Rarity = "Rare";
Resilience = 120;
Description = "A metal bait box with a rubber seal to protect the bait inside. Seemingly lost from a fishing boat of some kind. The bait is still alive and fresh. Therefore, finders keepers?- Opening it might give you an array of baits!";
Hint = "Fallen off of a fishing boat.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
BuyMult = 3.5;
Price = 150;
XP = 40;
Seasons = {"None"};
Weather = {"None"};
Quips = {"A Crate of Bait!", "A Bait Crate!", "Woah! A Crate!", "A Crate!", "Who left this here?", "Oh, the shrimps still moving?", "A Crate full of Bait!"};
SparkleColor = Color3.fromRGB(255, 255, 255);
HoldAnimation = fish:WaitForChild("downward");
From = "None";
IsCrate = true;
CrateType = "Bait";
BaitContents = {"Fish Head", "Rapid Catcher", "instant Catcher", "Seaweed", "Seaweed", "Squid", "Super Flakes", "Maggot", "Night Shrimp", "Maggot", "Maggot", "Weird Algae"};
};
["Volcanic Geode"] = {
WeightPool = {200, 200};
Chance = 17;
Rarity = "Rare";
Resilience = 120;
Description = "The Volcanic Geode encases a magma crystal core, preserving its contents with an amber-like quality. Within this geode, you might find a trove of rare or extinct treasuresâ€” it's like a volcanic Christmas!";
Hint = "Fallen off of a fishing boat.";
FavouriteBait = "Magnet";
FavouriteTime = nil;
BuyMult = 3;
Price = 200;
XP = 20;
Seasons = {"None"};
Weather = {"None"};
Quips = {"Ooo, shiny!", "A rock...?!", "Woah! Glowy thing!", "A Geode!", "What's this thing?"};
SparkleColor = Color3.fromRGB(255, 255, 255);
HoldAnimation = fish:WaitForChild("crate");
IsCrate = true;
CrateType = "All";
BaitContents = {"Coal", "Coal", "Coal", "Coal", "Maggot", "Maggot", "Minnow", "Truffle Worm", "Coal", "Night Shrimp", "Rapid Catcher", "instant Catcher", "Super Flakes", "Night Shrimp", "Rapid Catcher", "Super Flakes"};
FishContents = {"Ember Snapper", "Pyrogrub", "Sturgeon", "Magma Tang", "Alligator Gar", "Pufferfish", "Sea Urchin", "Sea Urchin", "Perch", "Perch", "Perch", "Angelfish", "Rock", "Rock", "Rock", "Magma Tang"};
CoinContents = {150, 500};
From = "Roslit Volcano";
};
["Largemouth Bass"] = {
WeightPool = {10, 45};
Chance = 75;
Rarity = "Common";
Resilience = 80;
Description = "The Largemouth Bass is a common freshwater fish found in Moosewood kno
