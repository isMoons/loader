
local HttpService = game:GetService("HttpService")

local function decodeScript(data)
    return HttpService:Base64Decode(data)
end

-- Anti-Tampering: Cek apakah kode dimodifikasi
local function integrityCheck()
    local signature = "QW5jZXN0cmFsIFByb3RlY3QgLSBTZWN1cmUgQ29kZQ=="
    if HttpService:Base64Decode(signature) ~= "Ancestral Protect - Secure Code" then
        error("Unauthorized modification detected!")
    end
end

integrityCheck() -- Pastikan kode tidak dimodifikasi

-- Dekode & Eksekusi Kode yang Dilindungi
local secure_code = "ICAgIGlmIGdldGdlbnYoKS5hbmNlc3RyYWwgdGhlbiAKICAgICAgICB3YXJuKCJBbmNlc3RyYWwgSHViOiBBbHJlYWR5IGV4ZWN1dGVkISIpIAogICAgICAgIHJldHVybiAKICAgIGVuZAogICAgZ2V0Z2VudigpLmFuY2VzdHJhbCA9IHRydWUKCiAgICBpZiBub3QgZ2FtZTpJc0xvYWRlZCgpIHRoZW4KICAgICAgICBnYW1lLkxvYWRlZDpXYWl0KCkKICAgIGVuZAoKICAgIGxvY2FsIFR3ZWVuU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVHdlZW5TZXJ2aWNlIikKbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIExvY2FsUGxheWVyID0gUGxheWVycy5Mb2NhbFBsYXllcgoKLS0gR1VJIEF3YWwKbG9jYWwgU2NyZWVuR3VpID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQpTY3JlZW5HdWkuUGFyZW50ID0gTG9jYWxQbGF5ZXI6V2FpdEZvckNoaWxkKCJQbGF5ZXJHdWkiKQoKLS0gRnVuZ3NpIHVudHVrIHVrdXJhbiByZXNwb25zaWYKbG9jYWwgZnVuY3Rpb24gR2V0UmVzcG9uc2l2ZVNpemUoYmFzZVNpemUpCiAgICBsb2NhbCBzY3JlZW5TaXplID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuVmlld3BvcnRTaXplCiAgICByZXR1cm4gVURpbTIubmV3KGJhc2VTaXplICogKHNjcmVlblNpemUuWCAvIDE5MjApLCAwLCBiYXNlU2l6ZSAqIChzY3JlZW5TaXplLlkgLyAxMDgwKSwgMCkKZW5kCgotLSBUZWtzICJBbmNlc3RyYWwiCmxvY2FsIFRpdGxlVGV4dCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKVGl0bGVUZXh0LlBhcmVudCA9IFNjcmVlbkd1aQpUaXRsZVRleHQuU2l6ZSA9IEdldFJlc3BvbnNpdmVTaXplKDAuMTUpIC0tIFVrdXJhbiBsZWJpaCBrZWNpbApUaXRsZVRleHQuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjQsIDApClRpdGxlVGV4dC5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQpUaXRsZVRleHQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKVGl0bGVUZXh0LkZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZApUaXRsZVRleHQuVGV4dFNjYWxlZCA9IHRydWUKVGl0bGVUZXh0LlRleHRTdHJva2VUcmFuc3BhcmVuY3kgPSAwLjIKVGl0bGVUZXh0LlRleHRUcmFuc3BhcmVuY3kgPSAxClRpdGxlVGV4dC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTg2LCAxMTUsIDIxMSkgLS0gU29mdCBQdXJwbGUgUHJlbWl1bQpUaXRsZVRleHQuVGV4dCA9ICLjgIxBbmNlc3RyYWzjgI0iIC0tIEZvbnQga2h1c3VzCgotLSBTdWJ0aXRsZSAiU2NyaXB0IGlzIGxvYWRpbmcsIHBsZWFzZSB3YWl0Li4uIgpsb2NhbCBTdWJUZXh0ID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQpTdWJUZXh0LlBhcmVudCA9IFNjcmVlbkd1aQpTdWJUZXh0LlNpemUgPSBHZXRSZXNwb25zaXZlU2l6ZSgwLjEyKSAtLSBVa3VyYW4gbGViaWgga2VjaWwKU3ViVGV4dC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNDgsIDApClN1YlRleHQuQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSkKU3ViVGV4dC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpTdWJUZXh0LkZvbnQgPSBFbnVtLkZvbnQuR290aGFtClN1YlRleHQuVGV4dFNjYWxlZCA9IHRydWUKU3ViVGV4dC5UZXh0U3Ryb2tlVHJhbnNwYXJlbmN5ID0gMC4yClN1YlRleHQuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIyMCwgMjIwLCAyMjApIC0tIEFidS1hYnUgcHJlbWl1bQpTdWJUZXh0LlRleHRUcmFuc3BhcmVuY3kgPSAxClN1YlRleHQuVGV4dCA9ICJTY3JpcHQgaXMgbG9hZGluZywgcGxlYXNlIHdhaXQuLi4iCgotLSBBbmltYXNpIGZhZGUtaW4KbG9jYWwgZmFkZUluVGl0bGUgPSBUd2VlblNlcnZpY2U6Q3JlYXRlKFRpdGxlVGV4dCwgVHdlZW5JbmZvLm5ldygxLCBFbnVtLkVhc2luZ1N0eWxlLlF1YWQsIEVudW0uRWFzaW5nRGlyZWN0aW9uLk91dCksIHsKICAgIFRleHRUcmFuc3BhcmVuY3kgPSAwCn0pCmxvY2FsIGZhZGVJblN1YiA9IFR3ZWVuU2VydmljZTpDcmVhdGUoU3ViVGV4dCwgVHdlZW5JbmZvLm5ldygxLCBFbnVtLkVhc2luZ1N0eWxlLlF1YWQsIEVudW0uRWFzaW5nRGlyZWN0aW9uLk91dCksIHsKICAgIFRleHRUcmFuc3BhcmVuY3kgPSAwCn0pCgpmYWRlSW5UaXRsZTpQbGF5KCkKZmFkZUluU3ViOlBsYXkoKQoKZmFkZUluVGl0bGUuQ29tcGxldGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgbG9jYWwgbW92ZVR3ZWVuID0gVHdlZW5TZXJ2aWNlOkNyZWF0ZShUaXRsZVRleHQsIFR3ZWVuSW5mby5uZXcoMSwgRW51bS5FYXNpbmdTdHlsZS5RdWFkLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5PdXQpLCB7CiAgICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjcsIDApCiAgICB9KQogICAgbG9jYWwgbW92ZVN1YlR3ZWVuID0gVHdlZW5TZXJ2aWNlOkNyZWF0ZShTdWJUZXh0LCBUd2VlbkluZm8ubmV3KDEsIEVudW0uRWFzaW5nU3R5bGUuUXVhZCwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0KSwgewogICAgICAgIFBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC43OCwgMCkKICAgIH0pCiAgICBtb3ZlVHdlZW46UGxheSgpCiAgICBtb3ZlU3ViVHdlZW46UGxheSgpCgogICAgdGFzay5kZWxheSgyLjUsIGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCBmYWRlT3V0VGl0bGUgPSBUd2VlblNlcnZpY2U6Q3JlYXRlKFRpdGxlVGV4dCwgVHdlZW5JbmZvLm5ldygxLCBFbnVtLkVhc2luZ1N0eWxlLlF1YWQsIEVudW0uRWFzaW5nRGlyZWN0aW9uLk91dCksIHsKICAgICAgICAgICAgVGV4dFRyYW5zcGFyZW5jeSA9IDEKICAgICAgICB9KQogICAgICAgIGxvY2FsIGZhZGVPdXRTdWIgPSBUd2VlblNlcnZpY2U6Q3JlYXRlKFN1YlRleHQsIFR3ZWVuSW5mby5uZXcoMSwgRW51bS5FYXNpbmdTdHlsZS5RdWFkLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5PdXQpLCB7CiAgICAgICAgICAgIFRleHRUcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgfSkKICAgICAgICBmYWRlT3V0VGl0bGU6UGxheSgpCiAgICAgICAgZmFkZU91dFN1YjpQbGF5KCkKCiAgICAgICAgZmFkZU91dFRpdGxlLkNvbXBsZXRlZDpXYWl0KCkKICAgICAgICBTY3JlZW5HdWk6RGVzdHJveSgpCiAgICBlbmQpCmVuZCkKCi0tIFVwZGF0ZSB1a3VyYW4gdGVrcyBzZWNhcmEgZGluYW1pcwp3b3Jrc3BhY2UuQ3VycmVudENhbWVyYTpHZXRQcm9wZXJ0eUNoYW5nZWRTaWduYWwoIlZpZXdwb3J0U2l6ZSIpOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgVGl0bGVUZXh0LlNpemUgPSBHZXRSZXNwb25zaXZlU2l6ZSgwLjE1KQogICAgU3ViVGV4dC5TaXplID0gR2V0UmVzcG9uc2l2ZVNpemUoMC4xMikKZW5kKSAgCgogICAgLS0gTG9hZCBVSSB1dGFtYSBGbHVlbnQKICAgIGxvY2FsIEZsdWVudCA9IGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL2dpdGh1Yi5jb20vZGF3aWQtc2NyaXB0cy9GbHVlbnQvcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL21haW4ubHVhIikpKCkKICAgIGxvY2FsIFNhdmVNYW5hZ2VyID0gbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9kYXdpZC1zY3JpcHRzL0ZsdWVudC9tYXN0ZXIvQWRkb25zL1NhdmVNYW5hZ2VyLmx1YSIpKSgpCiAgICBsb2NhbCBJbnRlcmZhY2VNYW5hZ2VyID0gbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9kYXdpZC1zY3JpcHRzL0ZsdWVudC9tYXN0ZXIvQWRkb25zL0ludGVyZmFjZU1hbmFnZXIubHVhIikpKCkKCiAgICAtLSBHVUkgdW50dWsgdG9tYm9sIG1pbmltaXplIChha2FuIG11bmN1bCBkaSBQQyAmIE1vYmlsZSkKICAgIGxvY2FsIENsaWNrQnV0dG9uID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQogICAgbG9jYWwgTWFpbkZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCiAgICBsb2NhbCBJY29uTGFiZWwgPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiKQogICAgbG9jYWwgVGV4dExhYmVsID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQogICAgbG9jYWwgRXhwYW5kQnV0dG9uID0gSW5zdGFuY2UubmV3KCJJbWFnZUJ1dHRvbiIpCiAgICBsb2NhbCBVSUNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQogICAgbG9jYWwgRGl2aWRlciA9IEluc3RhbmNlLm5ldygiRnJhbWUiKSAtLSBHYXJpcyBwZW1pc2FoCgogICAgQ2xpY2tCdXR0b24uTmFtZSA9ICJDbGlja0J1dHRvbiIKICAgIENsaWNrQnV0dG9uLlBhcmVudCA9IGdhbWUuQ29yZUd1aQogICAgQ2xpY2tCdXR0b24uWkluZGV4QmVoYXZpb3IgPSBFbnVtLlpJbmRleEJlaGF2aW9yLlNpYmxpbmcKICAgIENsaWNrQnV0dG9uLlJlc2V0T25TcGF3biA9IGZhbHNlIC0tIEFnYXIgdGlkYWsgaGlsYW5nIHNhYXQgcmVzZXQga2FyYWt0ZXIKCiAgICAtLSBGcmFtZSB1dGFtYSB0b21ib2wKICAgIE1haW5GcmFtZS5OYW1lID0gIk1haW5GcmFtZSIKICAgIE1haW5GcmFtZS5QYXJlbnQgPSBDbGlja0J1dHRvbgogICAgTWFpbkZyYW1lLkFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpCiAgICBNYWluRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAgLS0gSmFuZ2FuIGJ1YXQgdHJhbnNwYXJhbiBhZ2FyIGdyYWRpZW50IHRlcmxpaGF0CiAgICBNYWluRnJhbWUuQm9yZGVyU2l6ZVBpeGVsID0gMAogICAgTWFpbkZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuMSwgMCwgMC4yLCAwKSAtLSBQb3Npc2kgYXdhbAogICAgTWFpbkZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgMTIwLCAwLCA1MCkgLS0gVWt1cmFuIGxlYmloIGxlYmFyIGFnYXIgdGlkYWsgYmVyZGVtcGV0YW4KICAgIE1haW5GcmFtZS5BY3RpdmUgPSB0cnVlCiAgICBNYWluRnJhbWUuRHJhZ2dhYmxlID0gdHJ1ZSAtLSBCaXNhIGRpcGluZGFoa2FuCgogICAgLS0gU3VkdXQgbWVsZW5na3VuZwogICAgbG9jYWwgVUlDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIikKICAgIFVJQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDgpIAogICAgVUlDb3JuZXIuUGFyZW50ID0gTWFpbkZyYW1lCgogICAgLS0gVGFtYmFoa2FuIFVJR3JhZGllbnQgdW50dWsgZWZlayB0cmFuc2lzaSB3YXJuYQogICAgbG9jYWwgR3JhZGllbnQgPSBJbnN0YW5jZS5uZXcoIlVJR3JhZGllbnQiKQogICAgR3JhZGllbnQuQ29sb3IgPSBDb2xvclNlcXVlbmNlLm5ld3sKICAgICAgICBDb2xvclNlcXVlbmNlS2V5cG9pbnQubmV3KDAsIENvbG9yMy5mcm9tUkdCKDEzNiwgNzcsIDE2NykpLCAtLSBQdXJwbGUgKGF0YXMpCiAgICAgICAgQ29sb3JTZXF1ZW5jZUtleXBvaW50Lm5ldygxLCBDb2xvcjMuZnJvbVJHQigzMCwgMzAsIDgwKSkgICAgLS0gTmF2eSBCbHVlIChiYXdhaCkKICAgIH0KICAgIEdyYWRpZW50LlJvdGF0aW9uID0gOTAgLS0gR3JhZGllbnQgZGFyaSBhdGFzIGtlIGJhd2FoCiAgICBHcmFkaWVudC5QYXJlbnQgPSBNYWluRnJhbWUgLS0gUGFzdGlrYW4gZ3JhZGllbnQgbWFzdWsga2UgTWFpbkZyYW1lCgogICAgLS0gSWtvbiBkaSBzZWJlbGFoIGtpcmkKICAgIEljb25MYWJlbC5QYXJlbnQgPSBNYWluRnJhbWUKICAgIEljb25MYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgSWNvbkxhYmVsLlNpemUgPSBVRGltMi5uZXcoMCwgMjQsIDAsIDI0KSAtLSBVa3VyYW4gc2VkaWtpdCBkaXBlcmJlc2FyCiAgICBJY29uTGFiZWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMC4wOCwgMCwgMC41LCAtMTIpIC0tIExldGFrIGlrb24gZGl0ZW5nYWggdmVydGlrYWwKICAgIEljb25MYWJlbC5JbWFnZSA9ICJyYnhhc3NldGlkOi8vNzM0MDc3ODA0NDQ3NTMiIC0tIEdhbnRpIGRlbmdhbiBJRCBpa29uIHlhbmcgc2VzdWFpCiAgICBJY29uTGFiZWwuU2NhbGVUeXBlID0gRW51bS5TY2FsZVR5cGUuRml0CgogICAgLS0gR2FyaXMgcGVtaXNhaAogICAgRGl2aWRlci5QYXJlbnQgPSBNYWluRnJhbWUKICAgIERpdmlkZXIuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpIC0tIFdhcm5hIHB1dGloIHVudHVrIHBlbWlzYWgKICAgIERpdmlkZXIuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNSAtLSBUcmFuc3BhcmFuIHNlZGlraXQgYWdhciBoYWx1cwogICAgRGl2aWRlci5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjM1LCAwLCAwLjE1LCAwKSAtLSBTZWRpa2l0IGdlc2VyIGtlIGtpcmkKICAgIERpdmlkZXIuU2l6ZSA9IFVEaW0yLm5ldygwLCAxLCAwLjcsIDApIC0tIEdhcmlzIHZlcnRpa2FsIG1lbWFuamFuZwoKICAgIC0tIFRla3Mgc3VidGl0bGUgIkFuY2VzdHJhbCIKICAgIFRleHRMYWJlbC5QYXJlbnQgPSBNYWluRnJhbWUKICAgIFRleHRMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgVGV4dExhYmVsLlNpemUgPSBVRGltMi5uZXcoMC40NSwgMCwgMC41LCAwKSAtLSBVa3VyYW4gbGViaWgga2VjaWwgYWdhciB0ZXJsaWhhdCBzZXBlcnRpIHN1YnRpdGxlCiAgICBUZXh0TGFiZWwuUG9zaXRpb24gPSBVRGltMi5uZXcoMC40LCAwLCAwLjI1LCAwKSAtLSBEaWdlc2VyIGxlYmloIGtlIGF0YXMgYWdhciBsZWJpaCBwcm9wb3JzaW9uYWwKICAgIFRleHRMYWJlbC5Gb250ID0gRW51bS5Gb250LkdvdGhhbVNlbWlib2xkCiAgICBUZXh0TGFiZWwuVGV4dCA9ICJBbmNlc3RyYWwiCiAgICBUZXh0TGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCiAgICBUZXh0TGFiZWwuVGV4dFNjYWxlZCA9IHRydWUKICAgIFRleHRMYWJlbC5UZXh0VHJhbnNwYXJlbmN5ID0gMC4xCgogICAgLS0gVG9tYm9sIHVudHVrIHBlcmJlc2FyCiAgICBFeHBhbmRCdXR0b24uUGFyZW50ID0gTWFpbkZyYW1lCiAgICBFeHBhbmRCdXR0b24uQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIEV4cGFuZEJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDIwLCAwLCAyMCkgLS0gVWt1cmFuIGRpa3VyYW5naSBhZ2FyIHRpZGFrIGtlbHVhciBmcmFtZQogICAgRXhwYW5kQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAuODcsIC01LCAwLjUsIC0xMCkgLS0gRGlnZXNlciBsZWJpaCBrZSBkYWxhbQogICAgRXhwYW5kQnV0dG9uLkltYWdlID0gInJieGFzc2V0aWQ6Ly8xMDc5ODE5ODA3NzkzMjciIC0tIEdhbnRpIGRlbmdhbiBhc3NldCBJRCBpa29uIG1heGltaXplCiAgICBFeHBhbmRCdXR0b24uU2NhbGVUeXBlID0gRW51bS5TY2FsZVR5cGUuRml0IC0tIE1lbmNlZ2FoIGdhbWJhciBtZWxhcgoKICAgIC0tIFZhcmlhYmVsIHVudHVrIGNlayBzdGF0dXMgbWluaW1pemUKICAgIGxvY2FsIGlzTWluaW1pemVkID0gZmFsc2UKCiAgICBFeHBhbmRCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgaXNNaW5pbWl6ZWQgPSBub3QgaXNNaW5pbWl6ZWQgLS0gVG9nZ2xlIGFudGFyYSBtaW5pbWl6ZSBkYW4gb3BlbgoKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxJbnB1dE1hbmFnZXIiKTpTZW5kS2V5RXZlbnQodHJ1ZSwgIkxlZnRDb250cm9sIiwgZmFsc2UsIGdhbWUpCiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJWaXJ0dWFsSW5wdXRNYW5hZ2VyIik6U2VuZEtleUV2ZW50KGZhbHNlLCAiTGVmdENvbnRyb2wiLCBmYWxzZSwgZ2FtZSkKCiAgICAgICAgaWYgaXNNaW5pbWl6ZWQgdGhlbgogICAgICAgICAgICBFeHBhbmRCdXR0b24uSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzEwNzk4MTk4MDc3OTMyNyIgLS0gR2FudGkgZGVuZ2FuIGFzc2V0IElEIGlrb24gbWluaW1pemUKICAgICAgICBlbHNlCiAgICAgICAgICAgIEV4cGFuZEJ1dHRvbi5JbWFnZSA9ICJyYnhhc3NldGlkOi8vNzMwNjQ1ODg2NDM4OTIiIC0tIEtlbWJhbGkga2UgaWtvbiBtYXhpbWl6ZQogICAgICAgIGVuZAogICAgZW5kKQoKICAgIC0tIFVJIHV0YW1hIG1lbmdndW5ha2FuIEZsdWVudAogICAgbG9jYWwgV2luZG93ID0gRmx1ZW50OkNyZWF0ZVdpbmRvdyh7CiAgICAgICAgVGl0bGUgPSBnYW1lOkdldFNlcnZpY2UoIk1hcmtldHBsYWNlU2VydmljZSIpOkdldFByb2R1Y3RJbmZvKDE2NzMyNjk0MDUyKS5OYW1lIC4uIiAgfCBBbmNlc3RyYWwgdjEuMCIsCiAgICAgICAgU3ViVGl0bGUgPSAiaHR0cHM6Ly9kaXNjb3JkLmdnL054V3l5ZlZid3AiLAogICAgICAgIFRhYldpZHRoID0gMTYwLAogICAgICAgIFNpemUgPSBVRGltMi5mcm9tT2Zmc2V0KDUyMCwgNDAwKSwgLS0gVWt1cmFuIGxlYmloIGtlY2lsIGFnYXIgbGViaWggcmVzcG9uc2lmCiAgICAgICAgQWNyeWxpYyA9IGZhbHNlLAogICAgICAgIFRoZW1lID0gIkFtZXRoeXN0IiwKICAgICAgICBNaW5pbWl6ZUtleSA9IEVudW0uS2V5Q29kZS5MZWZ0Q29udHJvbAogICAgfSkKCiAgICAtLSAvLyAvLyAvLyBTZXJ2aWNlcyAvLyAvLyAvLyAtLQogICAgbG9jYWwgVmlydHVhbElucHV0TWFuYWdlciA9IGdhbWU6R2V0U2VydmljZSgiVmlydHVhbElucHV0TWFuYWdlciIpCiAgICBsb2NhbCBSZXBsaWNhdGVkU3RvcmFnZSA9IGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKQogICAgbG9jYWwgVmlydHVhbFVzZXIgPSBnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxVc2VyIikKICAgIGxvY2FsIEh0dHBTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpCiAgICBsb2NhbCBHdWlTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJHdWlTZXJ2aWNlIikKICAgIGxvY2FsIFJ1blNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKQogICAgbG9jYWwgV29ya3NwYWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKQogICAgbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCiAgICBsb2NhbCBDb3JlR3VpID0gZ2FtZTpHZXRTZXJ2aWNlKCdTdGFydGVyR3VpJykKICAgIGxvY2FsIENvbnRleHRBY3Rpb25TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCdDb250ZXh0QWN0aW9uU2VydmljZScpCiAgICBsb2NhbCBVc2VySW5wdXRTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCdVc2VySW5wdXRTZXJ2aWNlJykKCiAgICAtLSAvLyAvLyAvLyBMb2NhbHMgLy8gLy8gLy8gLS0KICAgIGxvY2FsIExvY2FsUGxheWVyID0gUGxheWVycy5Mb2NhbFBsYXllcgogICAgbG9jYWwgTG9jYWxDaGFyYWN0ZXIgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIgb3IgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6V2FpdCgpCiAgICBsb2NhbCBIdW1hbm9pZFJvb3RQYXJ0ID0gTG9jYWxDaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgbG9jYWwgVXNlclBsYXllciA9IEh1bWFub2lkUm9vdFBhcnQ6V2FpdEZvckNoaWxkKCJ1c2VyIikKICAgIGxvY2FsIEFjdGl2ZUZvbGRlciA9IFdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgiYWN0aXZlIikKICAgIGxvY2FsIEZpc2hpbmdab25lc0ZvbGRlciA9IFdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgiem9uZXMiKTpXYWl0Rm9yQ2hpbGQoImZpc2hpbmciKQogICAgbG9jYWwgVHBTcG90c0ZvbGRlciA9IFdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgid29ybGQiKTpXYWl0Rm9yQ2hpbGQoInNwYXducyIpOldhaXRGb3JDaGlsZCgiVHBTcG90cyIpCiAgICBsb2NhbCBOcGNGb2xkZXIgPSBXb3Jrc3BhY2U6RmluZEZpcnN0Q2hpbGQoIndvcmxkIik6V2FpdEZvckNoaWxkKCJucGNzIikKICAgIGxvY2FsIFBsYXllckd1aSA9IExvY2FsUGxheWVyOldhaXRGb3JDaGlsZCgiUGxheWVyR3VpIikKICAgIGxvY2FsIHNjcmVlbkd1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIiwgUGxheWVyR3VpKQogICAgLS0gbG9jYWwgc2hhZG93Q291bnRMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgc2NyZWVuR3VpKQogICAgbG9jYWwgUmVuZGVyU3RlcHBlZCA9IFJ1blNlcnZpY2UuUmVuZGVyU3RlcHBlZAogICAgbG9jYWwgV2FpdEZvclNvbWVvbmUgPSBSZW5kZXJTdGVwcGVkLldhaXQKCiAgICAtLSAvLyAvLyAvLyBGZWF0dXJlcyBMaXN0IC8vIC8vIC8vIC0tCgogICAgLS0gLy8gLy8gLy8gVmFyaWFibGVzIC8vIC8vIC8vIC0tCiAgICBsb2NhbCBDYXN0TW9kZSA9ICJMZWdpdCIKICAgIGxvY2FsIFNoYWtlTW9kZSA9ICJOYXZpZ2F0aW9uIgogICAgbG9jYWwgUmVlbE1vZGUgPSAiQmxhdGFudCIKICAgIGxvY2FsIENvbGxlY3RNb2RlID0gIlRlbGVwb3J0cyIKICAgIGxvY2FsIHRlbGVwb3J0U3BvdHMgPSB7fQogICAgbG9jYWwgRnJlZXplQ2hhciA9IGZhbHNlCiAgICBsb2NhbCBEYXlPbmx5TG9vcCA9IG5pbAogICAgbG9jYWwgQnlwYXNzR3BzTG9vcCA9IG5pbAogICAgLS0gbG9jYWwgTm9jbGlwID0gZmFsc2UKICAgIGxvY2FsIFJ1bkNvdW50ID0gZmFsc2UKCiAgICAtLSAvLyAvLyAvLyBGdW5jdGlvbnMgLy8gLy8gLy8gLS0KICAgIGZ1bmN0aW9uIFNob3dOb3RpZmljYXRpb24oU3RyaW5nKQogICAgICAgIEZsdWVudDpOb3RpZnkoewogICAgICAgICAgICBUaXRsZSA9ICJBbmNlc3RyYWwiLAogICAgICAgICAgICBDb250ZW50ID0gU3RyaW5nLAogICAgICAgICAgICBEdXJhdGlvbiA9IDUKICAgICAgICB9KQogICAgZW5kCgogICAgLS0gLy8gU2VuZGluZyBFeGVjdXRpb24gVG8gRGlzY29yZCAvLyAtLQogICAgbG9jYWwgZnVuY3Rpb24gR2V0UGxheWVyU3RhdHMoKQogICAgICAgIGxvY2FsIGh1ZCA9IExvY2FsUGxheWVyOkZpbmRGaXJzdENoaWxkKCJQbGF5ZXJHdWkiKSBhbmQgTG9jYWxQbGF5ZXIuUGxheWVyR3VpOkZpbmRGaXJzdENoaWxkKCJodWQiKQogICAgICAgIGlmIGh1ZCBhbmQgaHVkLnNhZmV6b25lIHRoZW4KICAgICAgICAgICAgbG9jYWwgY29pbnMgPSBodWQuc2FmZXpvbmU6RmluZEZpcnN0Q2hpbGQoImNvaW5zIikgYW5kIGh1ZC5zYWZlem9uZS5jb2lucy5UZXh0IG9yICJOL0EiCiAgICAgICAgICAgIGxvY2FsIGpvYklkID0gZ2FtZS5Kb2JJZAogICAgICAgICAgICBsb2NhbCBqb2luU2NyaXB0ID0gc3RyaW5nLmZvcm1hdCgiZ2FtZTpHZXRTZXJ2aWNlKCdUZWxlcG9ydFNlcnZpY2UnKTpUZWxlcG9ydFRvUGxhY2VJbnN0YW5jZSglZCwgJyVzJywgZ2FtZTpHZXRTZXJ2aWNlKCdQbGF5ZXJzJykuTG9jYWxQbGF5ZXIpIiwgZ2FtZS5QbGFjZUlkLCBqb2JJZCkKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIFVzZXJuYW1lID0gTG9jYWxQbGF5ZXIuTmFtZSwKICAgICAgICAgICAgICAgIERpc3BsYXlOYW1lID0gTG9jYWxQbGF5ZXIuRGlzcGxheU5hbWUsCiAgICAgICAgICAgICAgICBDb2lucyA9IGNvaW5zLAogICAgICAgICAgICAgICAgSm9iSWQgPSBqb2JJZCwKICAgICAgICAgICAgICAgIEpvaW5TY3JpcHQgPSBqb2luU2NyaXB0CiAgICAgICAgICAgIH0KICAgICAgICBlbmQKICAgICAgICByZXR1cm4gbmlsCiAgICBlbmQKCiAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuSWRsZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgVmlydHVhbFVzZXI6Q2FwdHVyZUNvbnRyb2xsZXIoKQogICAgICAgIFZpcnR1YWxVc2VyOkNsaWNrQnV0dG9uMihWZWN0b3IyLm5ldygpKQogICAgZW5kKQoKICAgIHNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSB0cnVlIGRvCiAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpXYWl0Rm9yQ2hpbGQoImV2ZW50cyIpOldhaXRGb3JDaGlsZCgiYWZrIik6RmlyZVNlcnZlcihmYWxzZSkKICAgICAgICAgICAgdGFzay53YWl0KDAuMDEpCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgLS0gLy8gLy8gLy8gQXV0byBDYXN0IC8vIC8vIC8vIC0tCiAgICBsb2NhbCBhdXRvQ2FzdEVuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgZnVuY3Rpb24gYXV0b0Nhc3QoKQogICAgICAgIGlmIExvY2FsQ2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgbG9jYWwgdG9vbCA9IExvY2FsQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiVG9vbCIpCiAgICAgICAgICAgIGlmIHRvb2wgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgaGFzQm9iYmVyID0gdG9vbDpGaW5kRmlyc3RDaGlsZCgiYm9iYmVyIikKICAgICAgICAgICAgICAgIGlmIG5vdCBoYXNCb2JiZXIgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIENhc3RNb2RlID09ICJMZWdpdCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBWaXJ0dWFsSW5wdXRNYW5hZ2VyOlNlbmRNb3VzZUJ1dHRvbkV2ZW50KDAsIDAsIDAsIHRydWUsIExvY2FsUGxheWVyLCAwKQogICAgICAgICAgICAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LkNoaWxkQWRkZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBIdW1hbm9pZFJvb3RQYXJ0OkZpbmRGaXJzdENoaWxkKCJwb3dlciIpIH49IG5pbCBhbmQgSHVtYW5vaWRSb290UGFydC5wb3dlci5wb3dlcmJhci5iYXIgfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LnBvd2VyLnBvd2VyYmFyLmJhci5DaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24ocHJvcGVydHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHByb3BlcnR5ID09ICJTaXplIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBIdW1hbm9pZFJvb3RQYXJ0LnBvd2VyLnBvd2VyYmFyLmJhci5TaXplID09IFVEaW0yLm5ldygxLCAwLCAxLCAwKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlydHVhbElucHV0TWFuYWdlcjpTZW5kTW91c2VCdXR0b25FdmVudCgwLCAwLCAwLCBmYWxzZSwgTG9jYWxQbGF5ZXIsIDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgQ2FzdE1vZGUgPT0gIkJsYXRhbnQiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgcm9kID0gTG9jYWxDaGFyYWN0ZXIgYW5kIExvY2FsQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiVG9vbCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJvZCBhbmQgcm9kOkZpbmRGaXJzdENoaWxkKCJ2YWx1ZXMiKSBhbmQgc3RyaW5nLmZpbmQocm9kLk5hbWUsICJSb2QiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQoMC41KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgUmFuZG9tID0gbWF0aC5yYW5kb20oOTAsIDk5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9kLmV2ZW50cy5jYXN0OkZpcmVTZXJ2ZXIoUmFuZG9tKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgdGFzay53YWl0KDAuNSkKICAgICAgICBlbmQKICAgIGVuZAoKICAgIC0tIC8vIC8vIC8vIEF1dG8gU2hha2UgLy8gLy8gLy8gLS0KICAgIGxvY2FsIGF1dG9TaGFrZUVuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgYXV0b1NoYWtlQ29ubmVjdGlvbgoKICAgIGxvY2FsIGZ1bmN0aW9uIGF1dG9TaGFrZSgpCiAgICAgICAgaWYgU2hha2VNb2RlID09ICJOYXZpZ2F0aW9uIiB0aGVuCiAgICAgICAgICAgIHhwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBzaGFrZXVpID0gUGxheWVyR3VpOkZpbmRGaXJzdENoaWxkKCJzaGFrZXVpIikKICAgICAgICAgICAgICAgIGlmIG5vdCBzaGFrZXVpIHRoZW4gcmV0dXJuIGVuZAoKICAgICAgICAgICAgICAgIGxvY2FsIHNhZmV6b25lID0gc2hha2V1aTpGaW5kRmlyc3RDaGlsZCgic2FmZXpvbmUiKQogICAgICAgICAgICAgICAgbG9jYWwgYnV0dG9uID0gc2FmZXpvbmUgYW5kIHNhZmV6b25lOkZpbmRGaXJzdENoaWxkKCJidXR0b24iKQoKICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjA1KSAtLSBNZW1wZXJjZXBhdCBqZWRhIHdha3R1CiAgICAgICAgICAgICAgICBHdWlTZXJ2aWNlLlNlbGVjdGVkT2JqZWN0ID0gYnV0dG9uCgogICAgICAgICAgICAgICAgaWYgR3VpU2VydmljZS5TZWxlY3RlZE9iamVjdCA9PSBidXR0b24gdGhlbgogICAgICAgICAgICAgICAgICAgIFZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KHRydWUsIEVudW0uS2V5Q29kZS5SZXR1cm4sIGZhbHNlLCBnYW1lKQogICAgICAgICAgICAgICAgICAgIFZpcnR1YWxJbnB1dE1hbmFnZXI6U2VuZEtleUV2ZW50KGZhbHNlLCBFbnVtLktleUNvZGUuUmV0dXJuLCBmYWxzZSwgZ2FtZSkKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjAzKSAtLSBNZW1wZXJjZXBhdCBkZWxheQogICAgICAgICAgICAgICAgR3VpU2VydmljZS5TZWxlY3RlZE9iamVjdCA9IG5pbAogICAgICAgICAgICBlbmQsIGZ1bmN0aW9uKGVycikgZW5kKQoKICAgICAgICBlbHNlaWYgU2hha2VNb2RlID09ICJNb3VzZSIgdGhlbgogICAgICAgICAgICB4cGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgc2hha2V1aSA9IFBsYXllckd1aTpGaW5kRmlyc3RDaGlsZCgic2hha2V1aSIpCiAgICAgICAgICAgICAgICBpZiBub3Qgc2hha2V1aSB0aGVuIHJldHVybiBlbmQKCiAgICAgICAgICAgICAgICBsb2NhbCBzYWZlem9uZSA9IHNoYWtldWk6RmluZEZpcnN0Q2hpbGQoInNhZmV6b25lIikKICAgICAgICAgICAgICAgIGxvY2FsIGJ1dHRvbiA9IHNhZmV6b25lIGFuZCBzYWZlem9uZTpGaW5kRmlyc3RDaGlsZCgiYnV0dG9uIikKICAgICAgICAgICAgICAgIGlmIG5vdCBidXR0b24gdGhlbiByZXR1cm4gZW5kCgogICAgICAgICAgICAgICAgbG9jYWwgcG9zID0gYnV0dG9uLkFic29sdXRlUG9zaXRpb24KICAgICAgICAgICAgICAgIGxvY2FsIHNpemUgPSBidXR0b24uQWJzb2x1dGVTaXplCgogICAgICAgICAgICAgICAgLS0gS2xpayBsZWJpaCBjZXBhdCBkZW5nYW4gamVkYSB5YW5nIGxlYmloIHBlbmRlawogICAgICAgICAgICAgICAgVmlydHVhbElucHV0TWFuYWdlcjpTZW5kTW91c2VCdXR0b25FdmVudChwb3MuWCArIHNpemUuWCAvIDIsIHBvcy5ZICsgc2l6ZS5ZIC8gMiwgMCwgdHJ1ZSwgTG9jYWxQbGF5ZXIsIDApCiAgICAgICAgICAgICAgICBWaXJ0dWFsSW5wdXRNYW5hZ2VyOlNlbmRNb3VzZUJ1dHRvbkV2ZW50KHBvcy5YICsgc2l6ZS5YIC8gMiwgcG9zLlkgKyBzaXplLlkgLyAyLCAwLCBmYWxzZSwgTG9jYWxQbGF5ZXIsIDApCiAgICAgICAgICAgIGVuZCwgZnVuY3Rpb24oZXJyKSBlbmQpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBzdGFydEF1dG9TaGFrZSgpCiAgICAgICAgaWYgYXV0b1NoYWtlQ29ubmVjdGlvbiBvciBub3QgYXV0b1NoYWtlRW5hYmxlZCB0aGVuIHJldHVybiBlbmQKICAgICAgICBhdXRvU2hha2VDb25uZWN0aW9uID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChhdXRvU2hha2UpIC0tIE1lbmdndW5ha2FuIEhlYXJ0YmVhdCBhZ2FyIGxlYmloIGNlcGF0CiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBzdG9wQXV0b1NoYWtlKCkKICAgICAgICBpZiBhdXRvU2hha2VDb25uZWN0aW9uIHRoZW4KICAgICAgICAgICAgYXV0b1NoYWtlQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkKICAgICAgICAgICAgYXV0b1NoYWtlQ29ubmVjdGlvbiA9IG5pbAogICAgICAgIGVuZAogICAgZW5kCgogICAgUGxheWVyR3VpLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGRlc2NlbmRhbnQpCiAgICAgICAgaWYgYXV0b1NoYWtlRW5hYmxlZCBhbmQgZGVzY2VuZGFudC5OYW1lID09ICJidXR0b24iIGFuZCBkZXNjZW5kYW50LlBhcmVudCBhbmQgZGVzY2VuZGFudC5QYXJlbnQuTmFtZSA9PSAic2FmZXpvbmUiIHRoZW4KICAgICAgICAgICAgc3RhcnRBdXRvU2hha2UoKQogICAgICAgIGVuZAogICAgZW5kKQoKICAgIFBsYXllckd1aS5EZXNjZW5kYW50QWRkZWQ6Q29ubmVjdChmdW5jdGlvbihkZXNjZW5kYW50KQogICAgICAgIGlmIGRlc2NlbmRhbnQuTmFtZSA9PSAicGxheWVyYmFyIiBhbmQgZGVzY2VuZGFudC5QYXJlbnQgYW5kIGRlc2NlbmRhbnQuUGFyZW50Lk5hbWUgPT0gImJhciIgdGhlbgogICAgICAgICAgICBzdG9wQXV0b1NoYWtlKCkKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICBpZiBhdXRvU2hha2VFbmFibGVkIGFuZCBQbGF5ZXJHdWk6RmluZEZpcnN0Q2hpbGQoInNoYWtldWkiKSBhbmQgUGxheWVyR3VpLnNoYWtldWk6RmluZEZpcnN0Q2hpbGQoInNhZmV6b25lIikgYW5kIFBsYXllckd1aS5zaGFrZXVpLnNhZmV6b25lOkZpbmRGaXJzdENoaWxkKCJidXR0b24iKSB0aGVuCiAgICAgICAgc3RhcnRBdXRvU2hha2UoKQogICAgZW5kCiAgICAtLSAvLyAvLyAvLyBBdXRvIFJlZWwgLy8gLy8gLy8gLS0KICAgIGxvY2FsIGF1dG9SZWVsRW5hYmxlZCA9IGZhbHNlCiAgICBsb2NhbCBQZXJmZWN0Q2F0Y2hFbmFibGVkID0gZmFsc2UKICAgIGxvY2FsIGF1dG9SZWVsQ29ubmVjdGlvbgogICAgbG9jYWwgZnVuY3Rpb24gYXV0b1JlZWwoKQogICAgICAgIGxvY2FsIHJlZWwgPSBQbGF5ZXJHdWk6RmluZEZpcnN0Q2hpbGQoInJlZWwiKQogICAgICAgIGlmIG5vdCByZWVsIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIGxvY2FsIGJhciA9IHJlZWw6RmluZEZpcnN0Q2hpbGQoImJhciIpCiAgICAgICAgbG9jYWwgcGxheWVyYmFyID0gYmFyIGFuZCBiYXI6RmluZEZpcnN0Q2hpbGQoInBsYXllcmJhciIpCiAgICAgICAgbG9jYWwgZmlzaCA9IGJhciBhbmQgYmFyOkZpbmRGaXJzdENoaWxkKCJmaXNoIikKICAgICAgICBpZiBwbGF5ZXJiYXIgYW5kIGZpc2ggdGhlbgogICAgICAgICAgICBwbGF5ZXJiYXIuUG9zaXRpb24gPSBmaXNoLlBvc2l0aW9uCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBub3BlcmZlY3QoKQogICAgICAgIGxvY2FsIHJlZWwgPSBQbGF5ZXJHdWk6RmluZEZpcnN0Q2hpbGQoInJlZWwiKQogICAgICAgIGlmIG5vdCByZWVsIHRoZW4gcmV0dXJuIGVuZAogICAgICAgIGxvY2FsIGJhciA9IHJlZWw6RmluZEZpcnN0Q2hpbGQoImJhciIpCiAgICAgICAgbG9jYWwgcGxheWVyYmFyID0gYmFyIGFuZCBiYXI6RmluZEZpcnN0Q2hpbGQoInBsYXllcmJhciIpCiAgICAgICAgaWYgcGxheWVyYmFyIHRoZW4KICAgICAgICAgICAgcGxheWVyYmFyLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIC0zNSwgMCkKICAgICAgICAgICAgd2FpdCgwLjIpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBzdGFydEF1dG9SZWVsKCkKICAgICAgICBpZiBSZWVsTW9kZSA9PSAiTGVnaXQiIHRoZW4KICAgICAgICAgICAgaWYgYXV0b1JlZWxDb25uZWN0aW9uIG9yIG5vdCBhdXRvUmVlbEVuYWJsZWQgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgIG5vcGVyZmVjdCgpCiAgICAgICAgICAgIHRhc2sud2FpdCgyKQogICAgICAgICAgICBhdXRvUmVlbENvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChhdXRvUmVlbCkKICAgICAgICAKICAgICAgICBlbHNlaWYgUmVlbE1vZGUgPT0gIkJsYXRhbnQiIHRoZW4KICAgICAgICAgICAgbG9jYWwgcmVlbCA9IFBsYXllckd1aTpGaW5kRmlyc3RDaGlsZCgicmVlbCIpCiAgICAgICAgICAgIGlmIG5vdCByZWVsIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICBsb2NhbCBiYXIgPSByZWVsOkZpbmRGaXJzdENoaWxkKCJiYXIiKQogICAgICAgICAgICBsb2NhbCBwbGF5ZXJiYXIgPSBiYXIgYW5kIGJhcjpGaW5kRmlyc3RDaGlsZCgicGxheWVyYmFyIikKCiAgICAgICAgICAgIGlmIHBsYXllcmJhciB0aGVuCiAgICAgICAgICAgICAgICBwbGF5ZXJiYXI6R2V0UHJvcGVydHlDaGFuZ2VkU2lnbmFsKCdQb3NpdGlvbicpOldhaXQoKQoKICAgICAgICAgICAgICAgIC0tIPCflLkgUGFuZ2dpbGFuIHBlcnRhbWEgKE5vcm1hbCkKICAgICAgICAgICAgICAgIGdhbWUuUmVwbGljYXRlZFN0b3JhZ2U6V2FpdEZvckNoaWxkKCJldmVudHMiKTpXYWl0Rm9yQ2hpbGQoInJlZWxmaW5pc2hlZCIpOkZpcmVTZXJ2ZXIoMTAwLCBmYWxzZSkKCiAgICAgICAgICAgICAgICAtLSDwn5S5IFBhbmdnaWxhbiBrZWR1YSAoTWVuZ2VsYWJ1aSBhbnRpLWNoZWF0KQogICAgICAgICAgICAgICAgdGFzay53YWl0KG1hdGgucmFuZG9tKDAuMDUsIDAuMikpIC0tIERlbGF5IGFjYWsgYWdhciBsZWJpaCBuYXR1cmFsCiAgICAgICAgICAgICAgICBnYW1lLlJlcGxpY2F0ZWRTdG9yYWdlOldhaXRGb3JDaGlsZCgiZXZlbnRzIik6V2FpdEZvckNoaWxkKCJyZWVsZmluaXNoZWQiKTpGaXJlU2VydmVyKDEwMCwgdHJ1ZSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKCgogICAgbG9jYWwgZnVuY3Rpb24gc3RvcEF1dG9SZWVsKCkKICAgICAgICBpZiBhdXRvUmVlbENvbm5lY3Rpb24gdGhlbgogICAgICAgICAgICBhdXRvUmVlbENvbm5lY3Rpb246RGlzY29ubmVjdCgpCiAgICAgICAgICAgIGF1dG9SZWVsQ29ubmVjdGlvbiA9IG5pbAogICAgICAgIGVuZAogICAgZW5kCgogICAgUGxheWVyR3VpLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGRlc2NlbmRhbnQpCiAgICAgICAgaWYgYXV0b1JlZWxFbmFibGVkIGFuZCBkZXNjZW5kYW50Lk5hbWUgPT0gInBsYXllcmJhciIgYW5kIGRlc2NlbmRhbnQuUGFyZW50IGFuZCBkZXNjZW5kYW50LlBhcmVudC5OYW1lID09ICJiYXIiIHRoZW4KICAgICAgICAgICAgc3RhcnRBdXRvUmVlbCgpCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgUGxheWVyR3VpLkRlc2NlbmRhbnRSZW1vdmluZzpDb25uZWN0KGZ1bmN0aW9uKGRlc2NlbmRhbnQpCiAgICAgICAgaWYgZGVzY2VuZGFudC5OYW1lID09ICJwbGF5ZXJiYXIiIGFuZCBkZXNjZW5kYW50LlBhcmVudCBhbmQgZGVzY2VuZGFudC5QYXJlbnQuTmFtZSA9PSAiYmFyIiB0aGVuCiAgICAgICAgICAgIHN0b3BBdXRvUmVlbCgpCiAgICAgICAgICAgIGlmIGF1dG9DYXN0RW5hYmxlZCB0aGVuCiAgICAgICAgICAgICAgICB0YXNrLndhaXQoMSkKICAgICAgICAgICAgICAgIGF1dG9DYXN0KCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgaWYgYXV0b1JlZWxFbmFibGVkIGFuZCBQbGF5ZXJHdWk6RmluZEZpcnN0Q2hpbGQoInJlZWwiKSBhbmQgCiAgICAgICAgUGxheWVyR3VpLnJlZWw6RmluZEZpcnN0Q2hpbGQoImJhciIpIGFuZCAKICAgICAgICBQbGF5ZXJHdWkucmVlbC5iYXI6RmluZEZpcnN0Q2hpbGQoInBsYXllcmJhciIpIHRoZW4KICAgICAgICBzdGFydEF1dG9SZWVsKCkKICAgIGVuZAoKICAgIC0tIC8vIC8vIC8vIFpvbmUgQ2FzdCAvLyAvLyAvLyAtLQogICAgWm9uZUNvbm5lY3Rpb24gPSBMb2NhbENoYXJhY3Rlci5DaGlsZEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oY2hpbGQpCiAgICAgICAgaWYgWm9uZUNhc3QgYW5kIGNoaWxkOklzQSgiVG9vbCIpIGFuZCBGaXNoaW5nWm9uZXNGb2xkZXI6RmluZEZpcnN0Q2hpbGQoWm9uZSkgfj0gbmlsIHRoZW4KICAgICAgICAgICAgY2hpbGQuQ2hpbGRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGJsZWhoKQogICAgICAgICAgICAgICAgaWYgYmxlaGguTmFtZSA9PSAiYm9iYmVyIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgUm9wZUNvbnN0cmFpbnQgPSBibGVoaDpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIlJvcGVDb25zdHJhaW50IikKICAgICAgICAgICAgICAgICAgICBpZiBab25lQ2FzdCBhbmQgUm9wZUNvbnN0cmFpbnQgfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgUm9wZUNvbnN0cmFpbnQuQ2hhbmdlZDpDb25uZWN0KGZ1bmN0aW9uKHByb3BlcnR5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcHJvcGVydHkgPT0gIkxlbmd0aCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJvcGVDb25zdHJhaW50Lkxlbmd0aCA9IG1hdGguaHVnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgICAgICAgICAgUm9wZUNvbnN0cmFpbnQuTGVuZ3RoID0gbWF0aC5odWdlCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEpCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgV2FpdEZvclNvbWVvbmUoUmVuZGVyU3RlcHBlZCkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgWm9uZUNhc3QgYW5kIGJsZWhoLlBhcmVudCB+PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsZWhoLkNGcmFtZSA9IEZpc2hpbmdab25lc0ZvbGRlcltab25lXS5DRnJhbWUKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZAogICAgZW5kKQoKICAgIC0tIC8vIEZpbmQgVHBTcG90cyAvLyAtLQogICAgbG9jYWwgVHBTcG90c0ZvbGRlciA9IFdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgid29ybGQiKTpXYWl0Rm9yQ2hpbGQoInNwYXducyIpOldhaXRGb3JDaGlsZCgiVHBTcG90cyIpCiAgICBmb3IgaSwgdiBpbiBwYWlycyhUcFNwb3RzRm9sZGVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgdGFibGUuZmluZCh0ZWxlcG9ydFNwb3RzLCB2Lk5hbWUpID09IG5pbCB0aGVuCiAgICAgICAgICAgIHRhYmxlLmluc2VydCh0ZWxlcG9ydFNwb3RzLCB2Lk5hbWUpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICAtLSAvLyAvLyAvLyBHZXQgUG9zaXRpb24gLy8gLy8gLy8gLS0KICAgIGZ1bmN0aW9uIEdldFBvc2l0aW9uKCkKICAgICAgICBpZiBub3QgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIFZlY3RvcjMubmV3KDAsMCwwKSwKICAgICAgICAgICAgICAgIFZlY3RvcjMubmV3KDAsMCwwKSwKICAgICAgICAgICAgICAgIFZlY3RvcjMubmV3KDAsMCwwKQogICAgICAgICAgICB9CiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpLlBvc2l0aW9uLlgsCiAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKS5Qb3NpdGlvbi5ZLAogICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikuUG9zaXRpb24uWgogICAgICAgIH0KICAgIGVuZAoKICAgIGZ1bmN0aW9uIEV4cG9ydFZhbHVlKGFyZzEsIGFyZzIpCiAgICAgICAgcmV0dXJuIHRvbnVtYmVyKHN0cmluZy5mb3JtYXQoIiUuIi4uKGFyZzIgb3IgMSkuLidmJywgYXJnMSkpCiAgICBlbmQKCiAgICAtLSAvLyAvLyAvLyBOb2NsaXAgU3RlcHBlZCAvLyAvLyAvLyAtLQogICAgLS0gTm9jbGlwQ29ubmVjdGlvbiA9IFJ1blNlcnZpY2UuU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIC0tICAgICBpZiBOb2NsaXAgPT0gdHJ1ZSB0aGVuCiAgICAtLSAgICAgICAgIGlmIExvY2FsQ2hhcmFjdGVyIH49IG5pbCB0aGVuCiAgICAtLSAgICAgICAgICAgICBmb3IgaSwgdiBpbiBwYWlycyhMb2NhbENoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbwogICAgLS0gICAgICAgICAgICAgICAgIGlmIHY6SXNBKCJCYXNlUGFydCIpIGFuZCB2LkNhbkNvbGxpZGUgPT0gdHJ1ZSB0aGVuCiAgICAtLSAgICAgICAgICAgICAgICAgICAgIHYuQ2FuQ29sbGlkZSA9IGZhbHNlCiAgICAtLSAgICAgICAgICAgICAgICAgZW5kCiAgICAtLSAgICAgICAgICAgICBlbmQKICAgIC0tICAgICAgICAgZW5kCiAgICAtLSAgICAgZW5kCiAgICAtLSBlbmQpCgogICAgLS0gLy8gLy8gLy8gRHVwZSAvLyAvLyAvLyAtLQogICAgLS0gbG9jYWwgRHVwZUVuYWJsZWQgPSBmYWxzZQogICAgLS0gbG9jYWwgRHVwZUNvbm5lY3Rpb24KICAgIC0tIGxvY2FsIGZ1bmN0aW9uIGF1dG9EdXBlKCkKICAgIC0tICAgICBsb2NhbCBodWQgPSBMb2NhbFBsYXllci5QbGF5ZXJHdWk6RmluZEZpcnN0Q2hpbGQoImh1ZCIpCiAgICAtLSAgICAgaWYgaHVkIHRoZW4KICAgIC0tICAgICAgICAgbG9jYWwgc2FmZXpvbmUgPSBodWQ6RmluZEZpcnN0Q2hpbGQoInNhZmV6b25lIikKICAgIC0tICAgICAgICAgaWYgc2FmZXpvbmUgdGhlbgogICAgLS0gICAgICAgICAgICAgbG9jYWwgYm9keUFubm91bmNlbWVudHMgPSBzYWZlem9uZTpGaW5kRmlyc3RDaGlsZCgiYm9keWFubm91bmNlbWVudHMiKQogICAgLS0gICAgICAgICAgICAgaWYgYm9keUFubm91bmNlbWVudHMgdGhlbgogICAgLS0gICAgICAgICAgICAgICAgIGxvY2FsIG9mZmVyRnJhbWUgPSBib2R5QW5ub3VuY2VtZW50czpGaW5kRmlyc3RDaGlsZCgib2ZmZXIiKQogICAgLS0gICAgICAgICAgICAgICAgIGlmIG9mZmVyRnJhbWUgYW5kIG9mZmVyRnJhbWU6RmluZEZpcnN0Q2hpbGQoImNvbmZpcm0iKSB0aGVuCiAgICAtLSAgICAgICAgICAgICAgICAgICAgIGZpcmVzaWduYWwob2ZmZXJGcmFtZS5jb25maXJtLk1vdXNlQnV0dG9uMUNsaWNrKQogICAgLS0gICAgICAgICAgICAgICAgIGVuZAogICAgLS0gICAgICAgICAgICAgZW5kCiAgICAtLSAgICAgICAgIGVuZAogICAgLS0gICAgIGVuZAogICAgLS0gZW5kCgogICAgLS0gbG9jYWwgZnVuY3Rpb24gc3RhcnRBdXRvRHVwZSgpCiAgICAtLSAgICAgaWYgRHVwZUNvbm5lY3Rpb24gb3Igbm90IER1cGVFbmFibGVkIHRoZW4gcmV0dXJuIGVuZAogICAgLS0gICAgIER1cGVDb25uZWN0aW9uID0gUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoYXV0b0R1cGUpCiAgICAtLSBlbmQKCiAgICAtLSBsb2NhbCBmdW5jdGlvbiBzdG9wQXV0b0R1cGUoKQogICAgLS0gICAgIGlmIER1cGVDb25uZWN0aW9uIHRoZW4KICAgIC0tICAgICAgICAgRHVwZUNvbm5lY3Rpb246RGlzY29ubmVjdCgpCiAgICAtLSAgICAgICAgIER1cGVDb25uZWN0aW9uID0gbmlsCiAgICAtLSAgICAgZW5kCiAgICAtLSBlbmQKCiAgICAtLSBQbGF5ZXJHdWkuRGVzY2VuZGFudEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oZGVzY2VuZGFudCkKICAgIC0tICAgICBpZiBEdXBlRW5hYmxlZCBhbmQgZGVzY2VuZGFudC5OYW1lID09ICJjb25maXJtIiBhbmQgZGVzY2VuZGFudC5QYXJlbnQgYW5kIGRlc2NlbmRhbnQuUGFyZW50Lk5hbWUgPT0gIm9mZmVyIiB0aGVuCiAgICAtLSAgICAgICAgIGxvY2FsIGh1ZCA9IExvY2FsUGxheWVyLlBsYXllckd1aTpGaW5kRmlyc3RDaGlsZCgiaHVkIikKICAgIC0tICAgICAgICAgaWYgaHVkIHRoZW4KICAgIC0tICAgICAgICAgICAgIGxvY2FsIHNhZmV6b25lID0gaHVkOkZpbmRGaXJzdENoaWxkKCJzYWZlem9uZSIpCiAgICAtLSAgICAgICAgICAgICBpZiBzYWZlem9uZSB0aGVuCiAgICAtLSAgICAgICAgICAgICAgICAgbG9jYWwgYm9keUFubm91bmNlbWVudHMgPSBzYWZlem9uZTpGaW5kRmlyc3RDaGlsZCgiYm9keWFubm91bmNlbWVudHMiKQogICAgLS0gICAgICAgICAgICAgICAgIGlmIGJvZHlBbm5vdW5jZW1lbnRzIHRoZW4KICAgIC0tICAgICAgICAgICAgICAgICAgICAgbG9jYWwgb2ZmZXJGcmFtZSA9IGJvZHlBbm5vdW5jZW1lbnRzOkZpbmRGaXJzdENoaWxkKCJvZmZlciIpCiAgICAtLSAgICAgICAgICAgICAgICAgICAgIGlmIG9mZmVyRnJhbWUgYW5kIG9mZmVyRnJhbWU6RmluZEZpcnN0Q2hpbGQoImNvbmZpcm0iKSB0aGVuCiAgICAtLSAgICAgICAgICAgICAgICAgICAgICAgICBmaXJlc2lnbmFsKG9mZmVyRnJhbWUuY29uZmlybS5Nb3VzZUJ1dHRvbjFDbGljaykKICAgIC0tICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAtLSAgICAgICAgICAgICAgICAgZW5kCiAgICAtLSAgICAgICAgICAgICBlbmQKICAgIC0tICAgICAgICAgZW5kCiAgICAtLSAgICAgZW5kCiAgICAtLSBlbmQpCgogICAgLS0gLy8gLy8gLy8gRXhjbHVzaXZlcyAvLyAvLyAvLyAtLQogICAgLS0gbG9jYWwgc2hhZG93Q291bnRMYWJlbCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgc2NyZWVuR3VpKQogICAgLS0gc2hhZG93Q291bnRMYWJlbC5TaXplID0gVURpbTIubmV3KDAsIDIwMCwgMCwgNTApCiAgICAtLSBzaGFkb3dDb3VudExhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDMwLCAwLCAyNjApCiAgICAtLSBzaGFkb3dDb3VudExhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjUKICAgIC0tIHNoYWRvd0NvdW50TGFiZWwuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDM4LCAzOCwgMzgpIAogICAgLS0gc2hhZG93Q291bnRMYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLm5ldygyMjAsIDEyNSwgMjU1KQogICAgLS0gc2hhZG93Q291bnRMYWJlbC5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnMKICAgIC0tIHNoYWRvd0NvdW50TGFiZWwuVGV4dFNpemUgPSAyNAogICAgLS0gc2hhZG93Q291bnRMYWJlbC5UZXh0ID0gIlNoYWRvdyBDb3VudDogMCIKCiAgICAtLSBsb2NhbCBjb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgc2hhZG93Q291bnRMYWJlbCkKICAgIC0tIGNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCAxMCkKCiAgICAtLSBsb2NhbCBmdW5jdGlvbiB1cGRhdGVTaGFkb3dDb3VudCgpCiAgICAtLSAgICAgbG9jYWwgY291bnQgPSAjd29ya3NwYWNlLlNoYWRvd3M6R2V0Q2hpbGRyZW4oKQogICAgLS0gICAgIHNoYWRvd0NvdW50TGFiZWwuVGV4dCA9ICJTaGFkb3cgQ291bnQ6ICIgLi4gY291bnQKICAgIC0tIGVuZAoKICAgIC0tIHNwYXduKGZ1bmN0aW9uKCkKICAgIC0tICAgICB3aGlsZSB0cnVlIGRvCiAgICAtLSAgICAgICAgIHVwZGF0ZVNoYWRvd0NvdW50KCkKICAgIC0tICAgICAgICAgdGFzay53YWl0KDAuNSkKICAgIC0tICAgICBlbmQKICAgIC0tIGVuZCkKCiAgICAtLSAvLyAvLyAvLyBUYWJzIEd1aSAvLyAvLyAvLyAtLQoKICAgIGxvY2FsIFRhYnMgPSB7IC0tIGh0dHBzOi8vbHVjaWRlLmRldi9pY29ucy8KICAgICAgICBJbmZvcm1hdGlvbiA9IFdpbmRvdzpBZGRUYWIoeyBUaXRsZSA9ICJJbmZvcm1hdGlvbiIsIEljb24gPSAiYm9vayIgfSksIC0tIEluZm9ybWFzaSB1bXVtCiAgICAgICAgTWFpbiA9IFdpbmRvdzpBZGRUYWIoeyBUaXRsZSA9ICJGaXNoaW5nIiwgSWNvbiA9ICJhbmNob3IiIH0pLCAtLSBBa3Rpdml0YXMgbWVtYW5jaW5nCiAgICAgICAgLS0gUXVlc3RSb2QgPSBXaW5kb3c6QWRkVGFiKHsgVGl0bGUgPSAiUXVlc3QgUm9kIiwgSWNvbiA9ICJ0YXJnZXQiIH0pLCAtLSBNaXNpIGRhbiBwZW5jYXJpYW4gcm9kCiAgICAgICAgU2hvcCA9IFdpbmRvdzpBZGRUYWIoeyBUaXRsZSA9ICJTaG9wIiwgSWNvbiA9ICJzaG9wcGluZy1jYXJ0IiB9KSwgLS0gUGVtYmVsaWFuIGl0ZW0KICAgICAgICBJdGVtcyA9IFdpbmRvdzpBZGRUYWIoeyBUaXRsZSA9ICJTZWxsaW5nICYgUmVwYWlyIiwgSWNvbiA9ICJoYW1tZXIiIH0pLCAtLSBKdWFsIGRhbiBwZXJiYWlrYW4gaXRlbQogICAgICAgIEF1dG9tYXRpY2FsbHkgPSBXaW5kb3c6QWRkVGFiKHsgVGl0bGUgPSAiQXV0b21hdGljYWxseSIsIEljb24gPSAicmVwZWF0IiB9KSwgLS0gUHJvc2VzIG90b21hdGlzCiAgICAgICAgVGVsZXBvcnRzID0gV2luZG93OkFkZFRhYih7IFRpdGxlID0gIlRlbGVwb3J0cyIsIEljb24gPSAiY29tcGFzcyIgfSksIC0tIEZpdHVyIHRlbGVwb3J0YXNpCiAgICAgICAgQ2hhcmFjdGVyVGFiID0gV2luZG93OkFkZFRhYih7IFRpdGxlID0gIkNoYXJhY3RlciIsIEljb24gPSAidXNlciIgfSksIC0tIEthcmFrdGVyIHBlbWFpbgogICAgICAgIEV4Y2x1c2l2ZXMgPSBXaW5kb3c6QWRkVGFiKHsgVGl0bGUgPSAiRXhjbHVzaXZlcyIsIEljb24gPSAic3RhciIgfSksIC0tIEl0ZW0gYXRhdSBmaXR1ciBzcGVzaWFsCiAgICAgICAgTWlzYyA9IFdpbmRvdzpBZGRUYWIoeyBUaXRsZSA9ICJNaXNjIiwgSWNvbiA9ICJwYWNrYWdlIiB9KSwgLS0gRml0dXIgdGFtYmFoYW4gbGFpbm55YQogICAgICAgIFNldHRpbmdzID0gV2luZG93OkFkZFRhYih7IFRpdGxlID0gIlNldHRpbmdzIiwgSWNvbiA9ICJzZXR0aW5ncyIgfSksIC0tIFBlbmdhdHVyYW4gc2lzdGVtCiAgICB9CiAgICBsb2NhbCBPcHRpb25zID0gRmx1ZW50Lk9wdGlvbnMKCiAgICBkbwogICAgICAgIFRhYnMuSW5mb3JtYXRpb246QWRkQnV0dG9uKHsKICAgICAgICAgICAgVGl0bGUgPSAiQ29weSBEaXNjb3JkIGxpbmsiLAogICAgICAgICAgICBEZXNjcmlwdGlvbiA9ICJKb2luIG91ciBtYWluIERpc2NvcmQgZm9yIHRoZSBsYXRlc3QgdXBkYXRlcyEiLAogICAgICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIHNldGNsaXBib2FyZCgiaHR0cHM6Ly9kaXNjb3JkLmdnL054V3l5ZlZid3AiKQogICAgICAgICAgICBlbmQKICAgICAgICB9KQogICAgICAgIFRhYnMuSW5mb3JtYXRpb246QWRkUGFyYWdyYXBoKHsKICAgICAgICAgICAgVGl0bGUgPSAi8J+agCBDSEFOR0VMT0dTIC0gQW5jZXN0cmFsIDEuMCIsCiAgICAgICAgICAgIENvbnRlbnQgPSBbWwogICAgICAgICAgICDwn5SlIExhdGVzdCBVcGRhdGVzICYgRW5oYW5jZW1lbnRzIPCflKUgIAogICAgICAgIAogICAgICAgICAgICDwn5ugIEJ1ZyBGaXhlczogIAogICAgICAgICAgICAtIFBhdGNoZWQgY3JpdGljYWwgc3RhYmlsaXR5IGlzc3VlcyBmb3IgYSBzbW9vdGhlciBleHBlcmllbmNlLiAgCiAgICAgICAgICAgIC0gUmVzb2x2ZWQgVUkgZ2xpdGNoZXMgZm9yIGJldHRlciByZXNwb25zaXZlbmVzcy4gIAogICAgICAgIAogICAgICAgICAgICDinKggTmV3IEZlYXR1cmVzOiAgCiAgICAgICAgICAgIC0gSW1wcm92ZWQgSWRlbnRpdHkgUHJvdGVjdGlvbiAKICAgICAgICAgICAgLSBNb3JlIGN1c3RvbWl6YWJsZSBvcHRpb25zIHRvIGhpZGUgcGxheWVyIGRhdGEuICAKICAgICAgICAKICAgICAgICAgICAg4pqhIFBlcmZvcm1hbmNlICYgT3B0aW1pemF0aW9uczogIAogICAgICAgICAgICAtIEZhc3RlciBzY3JpcHQgZXhlY3V0aW9uIGFuZCByZWR1Y2VkIGxhZy4gIAogICAgICAgICAgICAtIE9wdGltaXplZCBVSSBpbnRlcmFjdGlvbnMgZm9yIGJldHRlciBmbG93LiAgCiAgICAgICAgCiAgICAgICAgICAgIPCfkqEgQ29tbXVuaXR5LURyaXZlbiBDaGFuZ2VzOiAgCiAgICAgICAgICAgIC0gQWRkZWQgcG9wdWxhciBmZWF0dXJlcyBiYXNlZCBvbiB1c2VyIGZlZWRiYWNrLgogICAgICAgIAogICAgICAgICAgICDwn5SuIFdoYXQncyBOZXh0PyAgCiAgICAgICAgICAgIC0gTW9yZSBjdXN0b21pemF0aW9uIG9wdGlvbnMgZm9yIHRoZSBzaG9wIHN5c3RlbS4gIAogICAgICAgICAgICAtIEFkdmFuY2VkIHNlY3VyaXR5IGZlYXR1cmVzIGZvciBhIHNhZmVyIGV4cGVyaWVuY2UuICAKICAgICAgICAKICAgICAgICAgICAg8J+agCBTdGF5IHR1bmVkIGZvciBmdXR1cmUgdXBkYXRlcyAmIGV4Y2x1c2l2ZSBmZWF0dXJlcyEKICAgICAgICAgICAgXV0KICAgICAgICB9KQogICAgICAgIC0tIC8vIEV4Y2x1c2l2ZXMgVGFiIC8vIC0tCiAgICAgICAgbG9jYWwgc2VjdGlvbkV4Y2x1cyA9IFRhYnMuRXhjbHVzaXZlczpBZGRTZWN0aW9uKCJFeGNsdXNpdmVzIEZlYXR1cmVzIChTT09OKSIpCiAgICAgICAgLS0gbG9jYWwgQ291bnRTaGFkb3dzID0gVGFicy5FeGNsdXNpdmVzOkFkZFRvZ2dsZSgiQ291bnRTaGFkb3dzIiwge1RpdGxlID0gIlNob3cgQ291bnQgU2hhZG93cyIsIERlZmF1bHQgPSBmYWxzZSB9KQogICAgICAgIC0tIENvdW50U2hhZG93czpPbkNoYW5nZWQoZnVuY3Rpb24oKQogICAgICAgIC0tICAgICBsb2NhbCBSZXF1aXJlUm9kID0gUGxheWVyR3VpLmh1ZC5zYWZlem9uZS5lcXVpcG1lbnQucm9kcy5zY3JvbGwuc2FmZXpvbmU6RmluZEZpcnN0Q2hpbGQoIlJvZCBPZiBUaGUgRGVwdGhzIikKICAgICAgICAtLSAgICAgaWYgbm90IFJlcXVpcmVSb2QgdGhlbiByZXR1cm4gU2hvd05vdGlmaWNhdGlvbigiUmVxdWlyZW1lbnQgUm9kIE9mIFRoZSBEZXB0aHMiKSBlbmQKICAgICAgICAtLSAgICAgaWYgT3B0aW9ucy5Db3VudFNoYWRvd3MuVmFsdWUgPT0gdHJ1ZSB0aGVuCiAgICAgICAgLS0gICAgICAgICBzaGFkb3dDb3VudExhYmVsLlZpc2libGUgPSB0cnVlCiAgICAgICAgLS0gICAgIGVsc2UKICAgICAgICAtLSAgICAgICAgIHNoYWRvd0NvdW50TGFiZWwuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgLS0gICAgIGVuZAogICAgICAgIC0tIGVuZCkKICAgICAgICAtLSBsb2NhbCBSb2REdXBlID0gVGFicy5FeGNsdXNpdmVzOkFkZFRvZ2dsZSgiUm9kRHVwZSIsIHtUaXRsZSA9ICJSb2QgT2YgVGhlIERlcHRocyBTcGFtIiwgRGVmYXVsdCA9IGZhbHNlIH0pCiAgICAgICAgLS0gUm9kRHVwZTpPbkNoYW5nZWQoZnVuY3Rpb24oKQogICAgICAgIC0tICAgICBsb2NhbCBSZXF1aXJlUm9kID0gUGxheWVyR3VpLmh1ZC5zYWZlem9uZS5lcXVpcG1lbnQucm9kcy5zY3JvbGwuc2FmZXpvbmU6RmluZEZpcnN0Q2hpbGQoIlJvZCBPZiBUaGUgRGVwdGhzIikKICAgICAgICAtLSAgICAgaWYgbm90IFJlcXVpcmVSb2QgdGhlbiByZXR1cm4gU2hvd05vdGlmaWNhdGlvbigiUmVxdWlyZW1lbnQgUm9kIE9mIFRoZSBEZXB0aHMiKSBlbmQKICAgICAgICAtLSAgICAgd2hpbGUgT3B0aW9ucy5Sb2REdXBlLlZhbHVlIGRvCiAgICAgICAgLS0gICAgICAgICBsb2NhbCBhcmdzMSA9IHtbMV0gPSAiRmxpbXN5IFJvZCJ9CiAgICAgICAgLS0gICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuZXZlbnRzLmVxdWlwcm9kOkZpcmVTZXJ2ZXIodW5wYWNrKGFyZ3MxKSkKCiAgICAgICAgLS0gICAgICAgICBsb2NhbCBhcmdzMiA9IHtbMV0gPSAiUm9kIE9mIFRoZSBEZXB0aHMifQogICAgICAgIC0tICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLmV2ZW50cy5lcXVpcHJvZDpGaXJlU2VydmVyKHVucGFjayhhcmdzMikpCiAgICAgICAgLS0gICAgICAgICB0YXNrLndhaXQoUm9kRHVwZURlbGF5KQogICAgICAgIC0tICAgICBlbmQKICAgICAgICAtLSBlbmQpCiAgICAgICAgLS0gbG9jYWwgUm9kRHVwZV9EZWxheSA9IFRhYnMuRXhjbHVzaXZlczpBZGRTbGlkZXIoIlJvZER1cGVfRGVsYXkiLCB7CiAgICAgICAgLS0gICAgIFRpdGxlID0gIlJvZCBPZiBUaGUgRGVwdGhzIFNwYW0gRGVsYXkiLAogICAgICAgIC0tICAgICBEZXNjcmlwdGlvbiA9ICIiLAogICAgICAgIC0tICAgICBEZWZhdWx0ID0gMC4yLAogICAgICAgIC0tICAgICBNaW4gPSAwLAogICAgICAgIC0tICAgICBNYXggPSAxLAogICAgICAgIC0tICAgICBSb3VuZGluZyA9IDEsCiAgICAgICAgLS0gICAgIENhbGxiYWNrID0gZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgLS0gICAgICAgICBSb2REdXBlRGVsYXkgPSBWYWx1ZQogICAgICAgIC0tICAgICBlbmQKICAgICAgICAtLSB9KQogICAgICAgIC0tIFRhYnMuRXhjbHVzaXZlczpBZGRCdXR0b24oewogICAgICAgIC0tICAgICBUaXRsZSA9ICJEdXBlIFNoYWRvdyIsCiAgICAgICAgLS0gICAgIERlc2NyaXB0aW9uID0gIiIsCiAgICAgICAgLS0gICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIC0tICAgICAgICAgbG9jYWwgUmVxdWlyZVJvZCA9IFBsYXllckd1aS5odWQuc2FmZXpvbmUuZXF1aXBtZW50LnJvZHMuc2Nyb2xsLnNhZmV6b25lOkZpbmRGaXJzdENoaWxkKCJSb2QgT2YgVGhlIERlcHRocyIpCiAgICAgICAgLS0gICAgICAgICBpZiBub3QgUmVxdWlyZVJvZCB0aGVuIHJldHVybiBTaG93Tm90aWZpY2F0aW9uKCJSZXF1aXJlbWVudCBSb2QgT2YgVGhlIERlcHRocyIpIGVuZAogICAgICAgIC0tICAgICAgICAgZm9yIGksdiBpbiBwYWlycyhMb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbyAKICAgICAgICAtLSAgICAgICAgICAgICBpZiB2OkZpbmRGaXJzdENoaWxkKCJvZmZlciIpIHRoZW4KICAgICAgICAtLSAgICAgICAgICAgICAgICAgdi5QYXJlbnQgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICAtLSAgICAgICAgICAgICBlbmQKICAgICAgICAtLSAgICAgICAgIGVuZAogICAgICAgIC0tICAgICAgICAgdGFzay53YWl0KDIpCiAgICAgICAgLS0gICAgICAgICBmb3IgaSx2IGluIHBhaXJzKExvY2FsUGxheWVyLkNoYXJhY3RlcjpHZXRDaGlsZHJlbigpKSBkbyAKICAgICAgICAtLSAgICAgICAgICAgICBpZiB2OkZpbmRGaXJzdENoaWxkKCJvZmZlciIpIHRoZW4KICAgICAgICAtLSAgICAgICAgICAgICAgICAgdi5QYXJlbnQgPSBMb2NhbFBsYXllci5CYWNrcGFjawogICAgICAgIC0tICAgICAgICAgICAgIGVuZAogICAgICAgIC0tICAgICAgICAgZW5kCiAgICAgICAgLS0gICAgIGVuZAogICAgICAgIC0tIH0pCgogICAgICAgIC0tIFRhYnMuRXhjbHVzaXZlczpBZGRCdXR0b24oewogICAgICAgIC0tICAgICBUaXRsZSA9ICJEZXN0cm95IFNoYWRvd3MiLAogICAgICAgIC0tICAgICBEZXNjcmlwdGlvbiA9ICIiLAogICAgICAgIC0tICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICAtLSAgICAgICAgIGZvciBfLHNoYWRvdyBpbiBwYWlycyh3b3Jrc3BhY2UuU2hhZG93czpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgIC0tIAkJICAgIHNoYWRvdzpEZXN0cm95KCkKICAgICAgICAtLSAJICAgIGVuZAogICAgICAgIC0tICAgICBlbmQKICAgICAgICAtLSB9KQoKICAgICAgICAtLSAvLyBNYWluIFRhYiAvLyAtLQogICAgICAgIGxvY2FsIHNlY3Rpb24gPSBUYWJzLk1haW46QWRkU2VjdGlvbigiQXV0byBGaXNoaW5nIikKCiAgICAgICAgLS0gVGFibGUgdW50dWsgbWVueWltcGFuIHpvbmEgbWVtYW5jaW5nCiAgICAgICAgbG9jYWwgZmlzaFpvbmVzID0ge30KICAgICAgICAKICAgICAgICAtLSBVSSBEcm9wZG93biB1bnR1ayBtZW1pbGloIHpvbmEgbWVtYW5jaW5nCiAgICAgICAgbG9jYWwgZmlzaFpvbmVEcm9wZG93biA9IFRhYnMuTWFpbjpBZGREcm9wZG93bigiRmlzaFpvbmVEcm9wZG93biIsIHsKICAgICAgICAgICAgVGl0bGUgPSAiU2VsZWN0IEZpc2hpbmcgWm9uZSIsCiAgICAgICAgICAgIFZhbHVlcyA9IHt9LAogICAgICAgICAgICBNdWx0aSA9IGZhbHNlLAogICAgICAgICAgICBEZWZhdWx0ID0gbmlsLAogICAgICAgIH0pCiAgICAgICAgCiAgICAgICAgLS0gSW5wdXQgQm94IHVudHVrIE5hbWEgWm9uYQogICAgICAgIGxvY2FsIHpvbmVOYW1lSW5wdXQgPSBUYWJzLk1haW46QWRkSW5wdXQoIlpvbmVOYW1lSW5wdXQiLCB7CiAgICAgICAgICAgIFRpdGxlID0gIlpvbmUgTmFtZSIsCiAgICAgICAgICAgIERlZmF1bHQgPSAiRmlzaGluZyBTcG90IiwKICAgICAgICAgICAgUGxhY2Vob2xkZXIgPSAiRW50ZXIgem9uZSBuYW1lLi4uIiwKICAgICAgICB9KQogICAgICAgIAogICAgICAgIC0tIEJ1dHRvbiB1bnR1ayBtZW1idWF0IHpvbmEgYmFydQogICAgICAgIFRhYnMuTWFpbjpBZGRCdXR0b24oewogICAgICAgICAgICBUaXRsZSA9ICJDcmVhdGUgRmlzaCBab25lIiwKICAgICAgICAgICAgRGVzY3JpcHRpb24gPSAiU2F2ZSBjdXJyZW50IGxvY2F0aW9uIGFzIGEgRmlzaGluZyBab25lIChXaWxsIEJlIERlbGV0ZWQgSWYgUmVqb2luIEdhbWUpIiwKICAgICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBwbGF5ZXJQb3MgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUKICAgICAgICAgICAgICAgIGxvY2FsIHpvbmVOYW1lID0gem9uZU5hbWVJbnB1dC5WYWx1ZSB+PSAiIiBhbmQgem9uZU5hbWVJbnB1dC5WYWx1ZSBvciAiWm9uZSAiIC4uIHRvc3RyaW5nKCNmaXNoWm9uZXMgKyAxKQogICAgICAgIAogICAgICAgICAgICAgICAgLS0gU2ltcGFuIHpvbmEgYmFydSBrZSB0YWJsZQogICAgICAgICAgICAgICAgZmlzaFpvbmVzW3pvbmVOYW1lXSA9IHBsYXllclBvcwogICAgICAgIAogICAgICAgICAgICAgICAgLS0gVXBkYXRlIERyb3Bkb3duIFVJCiAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoZmlzaFpvbmVEcm9wZG93bi5WYWx1ZXMsIHpvbmVOYW1lKQogICAgICAgICAgICAgICAgZmlzaFpvbmVEcm9wZG93bjpTZXRWYWx1ZXMoZmlzaFpvbmVEcm9wZG93bi5WYWx1ZXMpCiAgICAgICAgCiAgICAgICAgICAgICAgICAtLSBOb3RpZnkgdXNlcgogICAgICAgICAgICAgICAgRmx1ZW50Ok5vdGlmeSh7CiAgICAgICAgICAgICAgICAgICAgVGl0bGUgPSAiRmlzaGluZyBab25lIiwKICAgICAgICAgICAgICAgICAgICBDb250ZW50ID0gIkNyZWF0ZWQgbmV3IHpvbmU6ICIgLi4gem9uZU5hbWUsCiAgICAgICAgICAgICAgICAgICAgRHVyYXRpb24gPSA1CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICBlbmQKICAgICAgICB9KQogICAgICAgIAogICAgICAgIC0tIFNhYXQgbWVtaWxpaCB6b25hLCB0ZWxlcG9ydCBrZSBsb2thc2kgdGVyc2VidXQKICAgICAgICBmaXNoWm9uZURyb3Bkb3duOk9uQ2hhbmdlZChmdW5jdGlvbihzZWxlY3RlZFpvbmUpCiAgICAgICAgICAgIGlmIGZpc2hab25lc1tzZWxlY3RlZFpvbmVdIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgdGFyZ2V0UG9zID0gZmlzaFpvbmVzW3NlbGVjdGVkWm9uZV0gKiBDRnJhbWUubmV3KDAsIDMsIDApIC0tIFNlZGlraXQgZGkgYXRhcyBhZ2FyIHRldGFwIHN0YWJpbAogICAgICAgICAgICAgICAgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gdGFyZ2V0UG9zCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgICAgICAKICAgICAgICAtLSBBVVRPIENBU1QKICAgICAgICBsb2NhbCBhdXRvQ2FzdCA9IFRhYnMuTWFpbjpBZGRUb2dnbGUoImF1dG9DYXN0IiwgeyBUaXRsZSA9ICJBdXRvIENhc3QiLCBEZWZhdWx0ID0gZmFsc2UgfSkKCiAgICAgICAgbG9jYWwgZnVuY3Rpb24gU3RhcnRBdXRvRmlzaGluZygpCiAgICAgICAgICAgIHNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIHdoaWxlIGF1dG9DYXN0RW5hYmxlZCBkbwogICAgICAgICAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCByb2ROYW1lID0gUmVwbGljYXRlZFN0b3JhZ2UucGxheWVyc3RhdHNbTG9jYWxQbGF5ZXIuTmFtZV0uU3RhdHMucm9kLlZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCByb2QgPSBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJUb29sIikgb3IgTG9jYWxQbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQocm9kTmFtZSkKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJvZCBhbmQgcm9kLlBhcmVudCA9PSBMb2NhbFBsYXllci5CYWNrcGFjayB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyLkh1bWFub2lkOkVxdWlwVG9vbChyb2QpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJvZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgdmFsdWVzID0gcm9kOkZpbmRGaXJzdENoaWxkKCJ2YWx1ZXMiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGV2ZW50cyA9IHJvZDpGaW5kRmlyc3RDaGlsZCgiZXZlbnRzIikKICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB2YWx1ZXMgYW5kIGV2ZW50cyBhbmQgbm90IHZhbHVlcy5jYXN0ZWQuVmFsdWUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMuY2FzdDpGaXJlU2VydmVyKDEwMCwgMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KCkgLS0gTWluaW1hbCBkZWxheSB1bnR1ayBtZW5jZWdhaCBsYWcKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQpCiAgICAgICAgZW5kCiAgICAgICAgYXV0b0Nhc3Q6T25DaGFuZ2VkKGZ1bmN0aW9uKCkKICAgICAgICAgICAgYXV0b0Nhc3RFbmFibGVkID0gT3B0aW9ucy5hdXRvQ2FzdC5WYWx1ZQogICAgICAgICAgICBpZiBhdXRvQ2FzdEVuYWJsZWQgdGhlbgogICAgICAgICAgICAgICAgU3RhcnRBdXRvRmlzaGluZygpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgICAgICAgICAgCiAgICAgICAgLS0gQXV0byBTaGFrZQogICAgICAgIGxvY2FsIGF1dG9TaGFrZSA9IFRhYnMuTWFpbjpBZGRUb2dnbGUoImF1dG9TaGFrZSIsIHsgVGl0bGUgPSAiQXV0byBTaGFrZSIsIERlZmF1bHQgPSBmYWxzZSB9KQoKICAgICAgICBhdXRvU2hha2U6T25DaGFuZ2VkKGZ1bmN0aW9uKCkKICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgT3B0aW9ucy5hdXRvU2hha2UuVmFsdWUgdGhlbgogICAgICAgICAgICAgICAgICAgIGF1dG9TaGFrZUVuYWJsZWQgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgdGFzay5kZWZlcihmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIGF1dG9TaGFrZUVuYWJsZWQgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHJvZCA9IExvY2FsQ2hhcmFjdGVyIGFuZCBMb2NhbENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIlRvb2wiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcm9kIGFuZCByb2Q6RmluZEZpcnN0Q2hpbGQoImJvYmJlciIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2QuZXZlbnRzLnNoYWtlOkZpcmVTZXJ2ZXIoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBSYW5kb21pemUgZGVsYXkgdG8gYXZvaWQgZGV0ZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLndhaXQobWF0aC5yYW5kb20oMC4zLCAwLjgpKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgYXV0b1NoYWtlRW5hYmxlZCA9IGZhbHNlCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZCkgICAgCiAgICAtLSBBVVRPIFJFRUwgCiAgICBsb2NhbCBhdXRvUmVlbEVuYWJsZWQgPSBmYWxzZQogICAgbG9jYWwgaW5zdGFSZWVsRW5hYmxlZCA9IGZhbHNlCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFN0YXJ0QXV0b1JlZWwoKQogICAgICAgIHNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgd2hpbGUgYXV0b1JlZWxFbmFibGVkIGRvCiAgICAgICAgICAgICAgICBsb2NhbCByZWVsR3VpID0gTG9jYWxQbGF5ZXIuUGxheWVyR3VpOkZpbmRGaXJzdENoaWxkKCJyZWVsIikKICAgICAgICAgICAgICAgIGlmIHJlZWxHdWkgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGJhciA9IHJlZWxHdWk6RmluZEZpcnN0Q2hpbGQoImJhciIpCiAgICAgICAgICAgICAgICAgICAgaWYgYmFyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgcGxheWVyQmFyID0gYmFyOkZpbmRGaXJzdENoaWxkKCJwbGF5ZXJiYXIiKQogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBmaXNoID0gYmFyOkZpbmRGaXJzdENoaWxkKCJmaXNoIikKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgYmFyIGFuZCByZWVsR3VpOklzRGVzY2VuZGFudE9mKExvY2FsUGxheWVyLlBsYXllckd1aSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ1blNlcnZpY2UuUmVuZGVyU3RlcHBlZDpXYWl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIG5ld1Bvc2l0aW9uID0gcGxheWVyQmFyLlBvc2l0aW9uOkxlcnAoZmlzaC5Qb3NpdGlvbiwgMC43KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyQmFyLlBvc2l0aW9uID0gVURpbTIuZnJvbVNjYWxlKG1hdGguY2xhbXAobmV3UG9zaXRpb24uWC5TY2FsZSwgMC4xNSwgMC44NSksIG5ld1Bvc2l0aW9uLlkuU2NhbGUpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICB3YWl0KG1hdGgucmFuZG9tKDAuMSwgMC4zKSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCiAgICAKICAgIGxvY2FsIGZ1bmN0aW9uIFN0YXJ0SW5zdGFSZWVsKCkKICAgICAgICBzcGF3bihmdW5jdGlvbigpCiAgICAgICAgICAgIHdoaWxlIGluc3RhUmVlbEVuYWJsZWQgZG8KICAgICAgICAgICAgICAgIGxvY2FsIHJlZWxHdWkgPSBMb2NhbFBsYXllci5QbGF5ZXJHdWk6RmluZEZpcnN0Q2hpbGQoInJlZWwiKQogICAgICAgICAgICAgICAgaWYgcmVlbEd1aSB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgYmFyID0gcmVlbEd1aTpGaW5kRmlyc3RDaGlsZCgiYmFyIikKICAgICAgICAgICAgICAgICAgICBpZiBiYXIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCByZWVsID0gYmFyOkZpbmRGaXJzdENoaWxkKCJyZWVsIikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVlbCBhbmQgcmVlbC5FbmFibGVkID09IHRydWUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgcmVlbEZpbmlzaGVkID0gUmVwbGljYXRlZFN0b3JhZ2UuZXZlbnRzOldhaXRGb3JDaGlsZCgicmVlbGZpbmlzaGVkIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZWxGaW5pc2hlZDpGaXJlU2VydmVyKG1hdGgucmFuZG9tKDk1LCAxMDUpLCBtYXRoLnJhbmRvbSgxLCAxMCkgPiAyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KG1hdGgucmFuZG9tKDAuMSwgMC41KSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZWxGaW5pc2hlZDpGaXJlU2VydmVyKDEwMCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICB3YWl0KG1hdGgucmFuZG9tKDAuMSwgMC4zKSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCiAgICAKICAgIGxvY2FsIGF1dG9SZWVsVG9nZ2xlID0gVGFicy5NYWluOkFkZFRvZ2dsZSgiYXV0b1JlZWwiLCB7IFRpdGxlID0gIkF1dG8gUmVlbCBMZWdpdCIsIERlZmF1bHQgPSBmYWxzZSB9KQogICAgYXV0b1JlZWxUb2dnbGU6T25DaGFuZ2VkKGZ1bmN0aW9uKCkKICAgICAgICBhdXRvUmVlbEVuYWJsZWQgPSBPcHRpb25zLmF1dG9SZWVsLlZhbHVlCiAgICAgICAgaWYgYXV0b1JlZWxFbmFibGVkIHRoZW4KICAgICAgICAgICAgdGFzay5zcGF3bihTdGFydEF1dG9SZWVsKQogICAgICAgIGVuZAogICAgZW5kKQogICAgCiAgICBsb2NhbCBpbnN0YVJlZWxUb2dnbGUgPSBUYWJzLk1haW46QWRkVG9nZ2xlKCJpbnN0YVJlZWwiLCB7IFRpdGxlID0gIkluc3RhbnQgUmVlbCIsIERlZmF1bHQgPSBmYWxzZSB9KQogICAgaW5zdGFSZWVsVG9nZ2xlOk9uQ2hhbmdlZChmdW5jdGlvbigpCiAgICAgICAgaW5zdGFSZWVsRW5hYmxlZCA9IE9wdGlvbnMuaW5zdGFSZWVsLlZhbHVlCiAgICAgICAgaWYgaW5zdGFSZWVsRW5hYmxlZCB0aGVuCiAgICAgICAgICAgIHRhc2suc3Bhd24oU3RhcnRJbnN0YVJlZWwpCiAgICAgICAgZW5kCiAgICBlbmQpIAoKICAgIC0tIEZSRUVaRSBDSEFSQUNURVIKICAgIGxvY2FsIEZyZWV6ZUNoYXJhY3RlciA9IFRhYnMuTWFpbjpBZGRUb2dnbGUoIkZyZWV6ZUNoYXJhY3RlciIsIHsgVGl0bGUgPSAiRnJlZXplIENoYXJhY3RlciIsIERlZmF1bHQgPSBmYWxzZSB9KQogICAgRnJlZXplQ2hhcmFjdGVyOk9uQ2hhbmdlZChmdW5jdGlvbigpCiAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBvbGRwb3MgPSBIdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZQogICAgICAgICAgICBGcmVlemVDaGFyID0gT3B0aW9ucy5GcmVlemVDaGFyYWN0ZXIuVmFsdWUKICAgICAgICAgICAgd2hpbGUgRnJlZXplQ2hhciBhbmQgdGFzay53YWl0KG1hdGgucmFuZG9tKDAuMSwgMC41KSkgZG8KICAgICAgICAgICAgICAgIGlmIEh1bWFub2lkUm9vdFBhcnQgdGhlbgogICAgICAgICAgICAgICAgICAgIEh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gb2xkcG9zCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQpCgogICAgICAgIC0tIC8vIE1vZGUgVGFiIC8vIC0tCiAgICAgICAgbG9jYWwgc2VjdGlvbiA9IFRhYnMuTWFpbjpBZGRTZWN0aW9uKCJNb2RlIEZpc2hpbmciKQogICAgICAgIGxvY2FsIGF1dG9DYXN0TW9kZSA9IFRhYnMuTWFpbjpBZGREcm9wZG93bigiYXV0b0Nhc3RNb2RlIiwgewogICAgICAgICAgICBUaXRsZSA9ICJBdXRvIENhc3QgTW9kZSIsCiAgICAgICAgICAgIFZhbHVlcyA9IHsiTGVnaXQifSwKICAgICAgICAgICAgTXVsdGkgPSBmYWxzZSwKICAgICAgICAgICAgRGVmYXVsdCA9IENhc3RNb2RlLAogICAgICAgIH0pCiAgICAgICAgYXV0b0Nhc3RNb2RlOk9uQ2hhbmdlZChmdW5jdGlvbihWYWx1ZSkKICAgICAgICAgICAgQ2FzdE1vZGUgPSBWYWx1ZQogICAgICAgIGVuZCkKICAgICAgICBsb2NhbCBhdXRvU2hha2VNb2RlID0gVGFicy5NYWluOkFkZERyb3Bkb3duKCJhdXRvU2hha2VNb2RlIiwgewogICAgICAgICAgICBUaXRsZSA9ICJBdXRvIFNoYWtlIE1vZGUiLAogICAgICAgICAgICBWYWx1ZXMgPSB7Ik5hdmlnYXRpb24ifSwKICAgICAgICAgICAgTXVsdGkgPSBmYWxzZSwKICAgICAgICAgICAgRGVmYXVsdCA9IFNoYWtlTW9kZSwKICAgICAgICB9KQogICAgICAgIGF1dG9TaGFrZU1vZGU6T25DaGFuZ2VkKGZ1bmN0aW9uKFZhbHVlKQogICAgICAgICAgICBTaGFrZU1vZGUgPSBWYWx1ZQogICAgICAgIGVuZCkKICAgICAgICAtLSBsb2NhbCBhdXRvUmVlbE1vZGUgPSBUYWJzLk1haW46QWRkRHJvcGRvd24oImF1dG9SZWVsTW9kZSIsIHsKICAgICAgICAtLSAgICAgVGl0bGUgPSAiQXV0byBSZWVsIE1vZGUiLAogICAgICAgIC0tICAgICBWYWx1ZXMgPSB7IkxlZ2l0IiwgIkJsYXRhbnQifSwKICAgICAgICAtLSAgICAgTXVsdGkgPSBmYWxzZSwKICAgICAgICAtLSAgICAgRGVmYXVsdCA9IFJlZWxNb2RlLAogICAgICAgIC0tIH0pCiAgICAgICAgLS0gYXV0b1JlZWxNb2RlOk9uQ2hhbmdlZChmdW5jdGlvbihWYWx1ZSkKICAgICAgICAtLSAgICAgUmVlbE1vZGUgPSBWYWx1ZQogICAgICAgIC0tIGVuZCkKICAgICAgICAKICAgICAgICAtLSBRdWVzdCBSb2QKICAgIC0tIGxvY2FsIHNlY3Rpb24gPSBUYWJzLlF1ZXN0Um9kOkFkZFNlY3Rpb24oIlF1ZXN0IEhlYXZlbnMgUm9kIChESVNBQkxFKSIpCiAgICAtLSAtLSBEcm9wZG93biB1bnR1ayBDcnlzdGFsIExvY2F0aW9uCiAgICAtLSBsb2NhbCBIZWF2ZW5Sb2RUUERyb3Bkb3duID0gVGFicy5RdWVzdFJvZDpBZGREcm9wZG93bigiSGVhdmVuUm9kVFBEcm9wZG93biIsIHsKICAgIC0tICAgICBUaXRsZSA9ICJTZWxlY3QgQ3J5c3RhbCAmIFJvZCBMb2NhdGlvbiIsCiAgICAtLSAgICAgVmFsdWVzID0geyJIZWF2ZW4gUm9kIiwgIkJsdWUgQ3J5c3RhbCIsICJHcmVlbiBDcnlzdGFsIiwgIlllbGxvdyBDcnlzdGFsIiwgIlJlZCBDcnlzdGFsIn0sCiAgICAtLSAgICAgTXVsdGkgPSBmYWxzZSwKICAgIC0tICAgICBEZWZhdWx0ID0gbmlsLAogICAgLS0gfSkKCiAgICAtLSBIZWF2ZW5Sb2RUUERyb3Bkb3duOk9uQ2hhbmdlZChmdW5jdGlvbihWYWx1ZSkKICAgIC0tICAgICB0YXNrLmRlZmVyKGZ1bmN0aW9uKCkgLS0gTWVuZ2hpbmRhcmkgY2FsbGJhY2sgb3ZlcmZsb3cKICAgIC0tICAgICAgICAgaWYgVmFsdWUgPT0gIkhlYXZlbiBSb2QiIHRoZW4KICAgIC0tICAgICAgICAgICAgIEh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygyMDAyNC4wMDAwMDAsIC00NjcuNjY1OTU1LCA3MTE1LjAwMDAwMCkKICAgIC0tICAgICAgICAgZWxzZWlmIFZhbHVlID09ICJCbHVlIENyeXN0YWwiIHRoZW4KICAgIC0tICAgICAgICAgICAgIEh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygyMDEyOS4wMDAwMDAsIDIwOC4zNzAxMDIsIDU0NDEuMDAwMDAwKQogICAgLS0gICAgICAgICBlbHNlaWYgVmFsdWUgPT0gIkdyZWVuIENyeXN0YWwiIHRoZW4KICAgIC0tICAgICAgICAgICAgIEh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygxOTg3Ni4wMDAwMDAsIDQ0OC4wOTQwNTUsIDU1NTguMDAwMDAwKQogICAgLS0gICAgICAgICBlbHNlaWYgVmFsdWUgPT0gIlllbGxvdyBDcnlzdGFsIiB0aGVuCiAgICAtLSAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoMTk0OTkuMDAwMDAwLCAzMzUuMTY4OTE1LCA1NTQ5LjAwMDAwMCkKICAgIC0tICAgICAgICAgZWxzZWlmIFZhbHVlID09ICJSZWQgQ3J5c3RhbCIgdGhlbgogICAgLS0gICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDE5OTI2LjAwMDAwMCwgMTEzNy44ODk0MDQsIDUzNTMuMDAwMDAwKQogICAgLS0gICAgICAgICBlbmQKICAgIC0tICAgICAgICAgSGVhdmVuUm9kVFBEcm9wZG93bjpTZXRWYWx1ZShuaWwpCiAgICAtLSAgICAgZW5kKQogICAgLS0gZW5kKQoKICAgIC0tIC0tIERyb3Bkb3duIHVudHVrIEJ1dHRvbiBMb2NhdGlvbgogICAgLS0gbG9jYWwgQnV0dG9uVFBEcm9wZG93biA9IFRhYnMuUXVlc3RSb2Q6QWRkRHJvcGRvd24oIkJ1dHRvblRQRHJvcGRvd24iLCB7CiAgICAtLSAgICAgVGl0bGUgPSAiU2VsZWN0IEJ1dHRvbiBMb2NhdGlvbiIsCiAgICAtLSAgICAgVmFsdWVzID0geyJCdXR0b24gMSIsICJCdXR0b24gMiIsICJCdXR0b24gMyIsICJCdXR0b24gNCIsICJCdXR0b24gNSJ9LAogICAgLS0gICAgIE11bHRpID0gZmFsc2UsCiAgICAtLSAgICAgRGVmYXVsdCA9IG5pbCwKICAgIC0tIH0pCgogICAgLS0gQnV0dG9uVFBEcm9wZG93bjpPbkNoYW5nZWQoZnVuY3Rpb24oVmFsdWUpCiAgICAtLSAgICAgdGFzay5kZWZlcihmdW5jdGlvbigpIC0tIE1lbmdoaW5kYXJpIGNhbGxiYWNrIG92ZXJmbG93CiAgICAtLSAgICAgICAgIGlmIFZhbHVlID09ICJCdXR0b24gMSIgdGhlbgogICAgLS0gICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDQwMi4wMDAwMDAsIDEzNS4wMjcwMjMsIDI2Ni4wMDAwMDApCiAgICAtLSAgICAgICAgIGVsc2VpZiBWYWx1ZSA9PSAiQnV0dG9uIDIiIHRoZW4KICAgIC0tICAgICAgICAgICAgIEh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMTcxOC4wMDAwMDAsIDE0OC4wMDAwMTUsIDczMy4wMDAwMDApCiAgICAtLSAgICAgICAgIGVsc2VpZiBWYWx1ZSA9PSAiQnV0dG9uIDMiIHRoZW4KICAgIC0tICAgICAgICAgICAgIEh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldygtMjU2NC4wMDAwMDAsIDE4MS4xNTAxMDEsIDEzNDkuMDAwMDAwKQogICAgLS0gICAgICAgICBlbHNlaWYgVmFsdWUgPT0gIkJ1dHRvbiA0IiB0aGVuCiAgICAtLSAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoMjkzMC4wMDAwMDAsIDI4MS43ODM2MzAsIDI1OTAuMDAwMDAwKQogICAgLS0gICAgICAgICBlbHNlaWYgVmFsdWUgPT0gIkJ1dHRvbiA1IiB0aGVuCiAgICAtLSAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoNTUwNS43MDExNzIsIDE0My40OTY2MTMsIC0zMTcuOTE1NDM2KQogICAgLS0gICAgICAgICBlbmQKICAgIC0tICAgICAgICAgQnV0dG9uVFBEcm9wZG93bjpTZXRWYWx1ZShuaWwpCiAgICAtLSAgICAgZW5kKQogICAgLS0gZW5kKQoKICAgICAgICAtLSBTaG9wIFRhYgogICAgICAgIGxvY2FsIHNlY3Rpb24gPSBUYWJzLlNob3A6QWRkU2VjdGlvbigiU2hvcCBGZWF0dXJlIikKICAgICAgICAtLSBEcm9wZG93biB1bnR1ayBSb2RzCiAgICAgICAgbG9jYWwgUm9kRHJvcGRvd24gPSBUYWJzLlNob3A6QWRkRHJvcGRvd24oIlJvZERyb3Bkb3duIiwgewogICAgICAgICAgICBUaXRsZSA9ICJSb2RzIiwKICAgICAgICAgICAgVmFsdWVzID0gewogICAgICAgICAgICAgICAgIkNhcmJvbiBSb2QiLCAiRmFzdCBSb2QiLCAiRmxpbXN5IFJvZCIsICJMb25nIFJvZCIsICJMdWNreSBSb2QiLCAiUGxhc3RpYyBSb2QiLCAiVHJhaW5pbmcgUm9kIiwgIlRlbXBlc3QgUm9kIiwgCiAgICAgICAgICAgICAgICAiS2luZ3MgUm9kIiwgIlNjdXJ2eSBSb2QiLCAiTm9jdHVybmFsIFJvZCIsICJNYWduZXQgUm9kIiwgIlRyaWRlbnQgUm9kIiwgIkxvc3QgUm9kIiwgIlJlaW5mb3JjZWQgUm9kIiwgIlN0ZWFkeSBSb2QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIE11bHRpID0gZmFsc2UsCiAgICAgICAgICAgIERlZmF1bHQgPSBuaWwsCiAgICAgICAgfSkKICAgICAgICAKICAgICAgICAtLSBEcm9wZG93biB1bnR1ayBCYWl0CiAgICAgICAgbG9jYWwgQmFpdERyb3Bkb3duID0gVGFicy5TaG9wOkFkZERyb3Bkb3duKCJCYWl0RHJvcGRvd24iLCB7CiAgICAgICAgICAgIFRpdGxlID0gIkJhaXQiLAogICAgICAgICAgICBWYWx1ZXMgPSB7ICJCYWl0Q3JhdGUiLCAiQ29yYWxHZW9kZSIgfSwKICAgICAgICAgICAgTXVsdGkgPSBmYWxzZSwKICAgICAgICAgICAgRGVmYXVsdCA9IG5pbCwKICAgICAgICB9KQogICAgICAgIAogICAgICAgIC0tIERyb3Bkb3duIHVudHVrIEl0ZW0gQmlhc2EKICAgICAgICBsb2NhbCBJdGVtRHJvcGRvd24gPSBUYWJzLlNob3A6QWRkRHJvcGRvd24oIkl0ZW1Ecm9wZG93biIsIHsKICAgICAgICAgICAgVGl0bGUgPSAiTWlzY2VsbGFuZW91cyBJdGVtcyIsCiAgICAgICAgICAgIFZhbHVlcyA9IHsgIkNyYWIgQ2FnZSIsICJHUFMiLCAiRW5jaGFudCBSZWxpYyIsICJNZXJsaW4iLCAiRmlzaCBSYWRhciIsICJCYXNpYyBEaXZpbmcgR2VhciIsICJDb25jZXB0aW9uIENvbmNoIiwgCiAgICAgICAgICAgICAgICAgICAgICAgICJBZHZhbmNlIERpdmluZyBHZWFyIiwgIlN1cGVyIEZsaXBwZXJzIiwgIkZsaXBwZXJzIiwgIlRpZGVCcmVha2VyIiB9LAogICAgICAgICAgICBNdWx0aSA9IGZhbHNlLAogICAgICAgICAgICBEZWZhdWx0ID0gbmlsLAogICAgICAgIH0pCiAgICAgICAgCiAgICAgICAgUm9kRHJvcGRvd246T25DaGFuZ2VkKGZ1bmN0aW9uKFZhbHVlKQogICAgICAgICAgICBsb2NhbCByb2RMb2NhdGlvbnMgPSB7CiAgICAgICAgICAgICAgICBbIkNhcmJvbiBSb2QiXSA9IENGcmFtZS5uZXcoNDU0LjA4NCwgMTUwLjU5MCwgMjI1LjMyOSksCiAgICAgICAgICAgICAgICBbIkZhc3QgUm9kIl0gPSBDRnJhbWUubmV3KDQ0Ny4xODQsIDE0OC4yMjYsIDIyMC4xODcpLAogICAgICAgICAgICAgICAgWyJGbGltc3kgUm9kIl0gPSBDRnJhbWUubmV3KDQ3MS4xMDgsIDE0OC4zNjIsIDIyOS42NDIpLAogICAgICAgICAgICAgICAgWyJMb25nIFJvZCJdID0gQ0ZyYW1lLm5ldyg0ODUuNjk1LCAxNzQuNTAwLCAxNDUuNzQ2KSwKICAgICAgICAgICAgICAgIFsiTHVja3kgUm9kIl0gPSBDRnJhbWUubmV3KDQ0Ni4wODYsIDE0OC4yNTMsIDIyMi4xNjApLAogICAgICAgICAgICAgICAgWyJQbGFzdGljIFJvZCJdID0gQ0ZyYW1lLm5ldyg0NTQuNDI1LCAxNDguMTcwLCAyMjkuMTcyKSwKICAgICAgICAgICAgICAgIFsiVHJhaW5pbmcgUm9kIl0gPSBDRnJhbWUubmV3KDQ1Ny42OTQsIDE0OC4zNTgsIDIzMC40MTQpLAogICAgICAgICAgICAgICAgWyJUZW1wZXN0IFJvZCJdID0gQ0ZyYW1lLm5ldygtNDkzMS42NDUsIC01OTUuMjM0LCAxODUyLjUwOCksCiAgICAgICAgICAgICAgICBbIktpbmdzIFJvZCJdID0gQ0ZyYW1lLm5ldygxMzc1LjkwMCwgLTgwNy4yODksIC0zMDMuNTA5KSwKICAgICAgICAgICAgICAgIFsiU2N1cnZ5IFJvZCJdID0gQ0ZyYW1lLm5ldygtMjgyNy4wNzksIDIxNC45NzQsIDE1MTIuNDgwKSwKICAgICAgICAgICAgICAgIFsiTm9jdHVybmFsIFJvZCJdID0gQ0ZyYW1lLm5ldygtMTQxLjg3NCwgLTUxMi4zNzQsIDExMzkuMDQ1KSwKICAgICAgICAgICAgICAgIFsiTWFnbmV0IFJvZCJdID0gQ0ZyYW1lLm5ldygtMTk1LjYwMywgMTMyLjUwMCwgMTkzMC45NzgpLAogICAgICAgICAgICAgICAgWyJUcmlkZW50IFJvZCJdID0gQ0ZyYW1lLm5ldygtMTQ4Mi43MzIsIC0yMjYuMDI0LCAtMjIwMC40NDEpLAogICAgICAgICAgICAgICAgWyJMb3N0IFJvZCJdID0gQ0ZyYW1lLm5ldygyODc5LjU2NywgMTM3LjgyMCwgMjcyMi4zMTMpLAogICAgICAgICAgICAgICAgWyJSZWluZm9yY2VkIFJvZCJdID0gQ0ZyYW1lLm5ldygtOTg2LjQ3NCwgLTI0Mi41MTAsIC0yNjg5Ljc5MiksCiAgICAgICAgICAgICAgICBbIlN0ZWFkeSBSb2QiXSA9IENGcmFtZS5uZXcoLTE1MTAuMzkxLCAxNDEuODUyLCA3NjIuMzQ3KQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiByb2RMb2NhdGlvbnNbVmFsdWVdIHRoZW4KICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSByb2RMb2NhdGlvbnNbVmFsdWVdCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkgICAgCiAgICAgICAgLS0gRXZlbnQgdW50dWsgQmFpdERyb3Bkb3duCiAgICAgICAgQmFpdERyb3Bkb3duOk9uQ2hhbmdlZChmdW5jdGlvbihWYWx1ZSkKICAgICAgICAgICAgbG9jYWwgYmFpdExvY2F0aW9ucyA9IHsKICAgICAgICAgICAgICAgIEJhaXRDcmF0ZSA9IENGcmFtZS5uZXcoMzg0LjU3NSwgMTM1LjM1MiwgMzM3LjUzNCksCiAgICAgICAgICAgICAgICBDb3JhbEdlb2RlID0gQ0ZyYW1lLm5ldygtMTY0NC4xMTUsIC0yMTMuNjc5LCAtMjg0OC4yOTIpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgYmFpdExvY2F0aW9uc1tWYWx1ZV0gdGhlbgogICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IGJhaXRMb2NhdGlvbnNbVmFsdWVdCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgICAgICAKICAgICAgICAtLSBFdmVudCB1bnR1ayBJdGVtRHJvcGRvd24KICAgIEl0ZW1Ecm9wZG93bjpPbkNoYW5nZWQoZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgbG9jYWwgaXRlbUxvY2F0aW9ucyA9IHsKICAgICAgICAgICAgWyJDcmFiIENhZ2UiXSA9IENGcmFtZS5uZXcoNDc0LjgwNCwgMTQ5LjY2NSwgMjI5LjQ5NSksCiAgICAgICAgICAgIFsiR1BTIl0gPSBDRnJhbWUubmV3KDUxNy44OTcsIDE0OS4yMTgsIDI4NC44NTcpLAogICAgICAgICAgICBbIkVuY2hhbnQgUmVsaWMiXSA9IENGcmFtZS5uZXcoLTkyOS43NTQsIDIyNS43MzAsIC05OTMuNjI5KSwKICAgICAgICAgICAgWyJNZXJsaW4iXSA9IENGcmFtZS5uZXcoLTkyOS43NTQsIDIyNS43MzAsIC05OTMuNjI5KSwKICAgICAgICAgICAgWyJGaXNoIFJhZGFyIl0gPSBDRnJhbWUubmV3KDM2NS43NTEsIDEzNy4wMDAsIDI3NC4xMDUpLAogICAgICAgICAgICBbIkJhc2ljIERpdmluZyBHZWFyIl0gPSBDRnJhbWUubmV3KC0xNjUzLjEwNCwgLTIxMi4yNjksIC0yODIzLjU3NCksCiAgICAgICAgICAgIFsiQ29uY2VwdGlvbiBDb25jaCJdID0gQ0ZyYW1lLm5ldygtMTYzMC41MDcsIC0yMTEuNjQ1LCAtMjg1OS43MjkpLAogICAgICAgICAgICBbIkFkdmFuY2UgRGl2aW5nIEdlYXIiXSA9IENGcmFtZS5uZXcoLTc5MC44MDEsIDEzMi43NDksIC0zMTAyLjM2MCksCiAgICAgICAgICAgIFsiU3VwZXIgRmxpcHBlcnMiXSA9IENGcmFtZS5uZXcoLTk2Ni40OTQsIC0yNDIuNTEwLCAtMjY5NC40NjgpLAogICAgICAgICAgICBbIkZsaXBwZXJzIl0gPSBDRnJhbWUubmV3KC0xNjQxLjQ0MywgLTIxMy42NzksIC0yODUyLjQ2MCksCiAgICAgICAgICAgIFsiVGlkZUJyZWFrZXIiXSA9IENGcmFtZS5uZXcoLTE2NDIuMTE3LCAtMjEzLjY3OSwgLTI4NTAuNzkxKQogICAgICAgIH0KICAgICAgICAKICAgICAgICBpZiBpdGVtTG9jYXRpb25zW1ZhbHVlXSB0aGVuCiAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBpdGVtTG9jYXRpb25zW1ZhbHVlXQogICAgICAgIGVuZAogICAgZW5kKQoKICAgICAgICBUYWJzLlNob3A6QWRkUGFyYWdyYXBoKHsKICAgICAgICAgICAgVGl0bGUgPSAiQWJvdXQgU2hvcCBGZWF0dXJlcyIsCiAgICAgICAgICAgIENvbnRlbnQgPSBbWwogICAgICAgICAgICBUaGlzIHNlY3Rpb24gd2lsbCByZWNlaXZlIGZ1dHVyZSB1cGRhdGVzISAgCiAgICAgICAgCiAgICAgICAgICAgIPCflLkgU29vbiwgYSBCdXkgQnV0dG9uIHdpbGwgYmUgYWRkZWQsIGFsbG93aW5nIHlvdSB0byBwdXJjaGFzZSBpdGVtcyBkaXJlY3RseSB3aXRob3V0IHRlbGVwb3J0YXRpb24uICAKICAgICAgICAgICAgXV0KICAgICAgICB9KQogICAgICAgIAogICAgLS0gLy8gU2VsbCBUYWIgLy8gLS0KICAgIGxvY2FsIGlzU2VsbGluZ0hhbmQgPSBmYWxzZSAtLSBTdGF0dXMgYXdhbCAoYmVsdW0gYWt0aWYpCgogICAgZnVuY3Rpb24gU2VsbEhhbmQoKQogICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLmV2ZW50cy5TZWxsSGFuZDpJbnZva2VTZXJ2ZXIoKQogICAgICAgIGVuZCkKICAgIGVuZAogICAgCiAgICBUYWJzLkl0ZW1zOkFkZEJ1dHRvbih7CiAgICAgICAgVGl0bGUgPSAiU2VsbCBIYW5kIiwKICAgICAgICBEZXNjcmlwdGlvbiA9ICJUb2dnbGUgU2VsbCBIYW5kIiwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgaXNTZWxsaW5nSGFuZCA9IG5vdCBpc1NlbGxpbmdIYW5kIC0tIFRvZ2dsZSBzdGF0dXMKICAgICAgICAgICAgaWYgaXNTZWxsaW5nSGFuZCB0aGVuCiAgICAgICAgICAgICAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICB3aGlsZSBpc1NlbGxpbmdIYW5kIGFuZCB0YXNrLndhaXQoKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBTZWxsSGFuZCgpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgfSkgICAgCiAgICBsb2NhbCBpc1NlbGxpbmcgPSBmYWxzZSAtLSBTdGF0dXMgYXdhbCAoYmVsdW0gYWt0aWYpCgogICAgVGFicy5JdGVtczpBZGRCdXR0b24oewogICAgICAgIFRpdGxlID0gIlNlbGwgQWxsIiwKICAgICAgICBEZXNjcmlwdGlvbiA9ICJUb2dnbGUgU2VsbCBBbGwiLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICBpc1NlbGxpbmcgPSBub3QgaXNTZWxsaW5nIC0tIFRvZ2dsZSBzdGF0dXMKICAgICAgICAgICAgaWYgaXNTZWxsaW5nIHRoZW4KICAgICAgICAgICAgICAgIHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGlzU2VsbGluZyBhbmQgdGFzay53YWl0KCkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLmV2ZW50cy5TZWxsQWxsOkludm9rZVNlcnZlcigpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICB9KSAgICAKICAgICAgICAtLSAvLyBUcmVhc3VyZSBUYWIgLy8gLS0KICAgICAgICBsb2NhbCBzZWN0aW9uID0gVGFicy5JdGVtczpBZGRTZWN0aW9uKCJUcmVhc3VyZSIpCiAgICAgICAgVGFicy5JdGVtczpBZGRCdXR0b24oewogICAgICAgICAgICBUaXRsZSA9ICJUZWxlcG9ydCB0byBKYWNrIE1hcnJvdyIsCiAgICAgICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC0yODI0LjM1OSwgMjE0LjMxMSwgMTUxOC4xMzApCiAgICAgICAgICAgIGVuZAogICAgICAgIH0pCiAgICAgICAgVGFicy5JdGVtczpBZGRCdXR0b24oewogICAgICAgICAgICBUaXRsZSA9ICJSZXBhaXIgTWFwIiwKICAgICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBmb3IgaSx2IGluIHBhaXJzKGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbyAKICAgICAgICAgICAgICAgICAgICBpZiB2Lk5hbWUgPT0gIlRyZWFzdXJlIE1hcCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkOkVxdWlwVG9vbCh2KQogICAgICAgICAgICAgICAgICAgICAgICB3b3Jrc3BhY2Uud29ybGQubnBjc1siSmFjayBNYXJyb3ciXS50cmVhc3VyZS5yZXBhaXJtYXA6SW52b2tlU2VydmVyKCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICB9KQogICAgICAgIFRhYnMuSXRlbXM6QWRkQnV0dG9uKHsKICAgICAgICAgICAgVGl0bGUgPSAiQ29sbGVjdCBUcmVhc3VyZSIsCiAgICAgICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgZm9yIGksIHYgaW4gaXBhaXJzKGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIik6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiB2LkNsYXNzTmFtZSA9PSAiUHJveGltaXR5UHJvbXB0IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHYuSG9sZER1cmF0aW9uID0gMAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBmb3IgaSwgdiBpbiBwYWlycyh3b3Jrc3BhY2Uud29ybGQuY2hlc3RzOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgdjpJc0EoIlBhcnQiKSBhbmQgdjpGaW5kRmlyc3RDaGlsZCgiQ2hlc3RTZXR1cCIpIHRoZW4gCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSB2LkNGcmFtZQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXywgdiBpbiBwYWlycyh3b3Jrc3BhY2Uud29ybGQuY2hlc3RzOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB2Lk5hbWUgPT0gIlByb3hpbWl0eVByb21wdCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcmVwcm94aW1pdHlwcm9tcHQodikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEpCiAgICAgICAgICAgICAgICAgICAgZW5kIAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIH0pCgogICAgICAgIC0tIC8vIFRlbGVwb3J0cyBUYWIgLy8gLS0KICAgICAgICBsb2NhbCBzZWN0aW9uID0gVGFicy5UZWxlcG9ydHM6QWRkU2VjdGlvbigiU2VsZWN0IFRlbGVwb3J0IikKCiAgICAgICAgLS0gUGFzdGlrYW4gdGVsZXBvcnRTcG90cyB0ZXJ1cnV0IGFsZmFiZXRpcwogICAgICAgIHRhYmxlLnNvcnQodGVsZXBvcnRTcG90cywgZnVuY3Rpb24oYSwgYikKICAgICAgICAgICAgcmV0dXJuIGE6bG93ZXIoKSA8IGI6bG93ZXIoKQogICAgICAgIGVuZCkKICAgICAgICAKICAgICAgICBsb2NhbCBJc2xhbmRUUERyb3Bkb3duVUkgPSBUYWJzLlRlbGVwb3J0czpBZGREcm9wZG93bigiSXNsYW5kVFBEcm9wZG93blVJIiwgewogICAgICAgICAgICBUaXRsZSA9ICJBcmVhIFRlbGVwb3J0IiwKICAgICAgICAgICAgVmFsdWVzID0gdGVsZXBvcnRTcG90cywKICAgICAgICAgICAgTXVsdGkgPSBmYWxzZSwKICAgICAgICAgICAgRGVmYXVsdCA9IG5pbCwKICAgICAgICB9KQogICAgICAgIAogICAgICAgIElzbGFuZFRQRHJvcGRvd25VSTpPbkNoYW5nZWQoZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgICAgIGlmIHRlbGVwb3J0U3BvdHMgfj0gbmlsIGFuZCBIdW1hbm9pZFJvb3RQYXJ0IH49IG5pbCB0aGVuCiAgICAgICAgICAgICAgICB4cGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIHRhcmdldCA9IFRwU3BvdHNGb2xkZXI6RmluZEZpcnN0Q2hpbGQoVmFsdWUpCiAgICAgICAgICAgICAgICAgICAgaWYgdGFyZ2V0IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSB0YXJnZXQuQ0ZyYW1lICsgVmVjdG9yMy5uZXcoMCwgNSwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgSXNsYW5kVFBEcm9wZG93blVJOlNldFZhbHVlKG5pbCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZCwgZnVuY3Rpb24oZXJyKQogICAgICAgICAgICAgICAgICAgIHdhcm4oIlRlbGVwb3J0IEVycm9yOiAiLCBlcnIpCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgICAgICAtLSBsb2NhbCBQbGFjZXMgPSB7CiAgICAgICAgLS0gICAgIFsiTGV2ZWwgUHV6emxlIl0gPSBWZWN0b3IzLm5ldygxOTk1NS42NzE4NzUsIDU4Ni44NTM3NjAsIDU1NzEuNTM1NjQ1KSwKICAgICAgICAtLSAgICAgWyJHbGFjaWFsIEdyb3R0byJdID0gVmVjdG9yMy5uZXcoMTk5MDcuMTY5OTIyLCAxMTU0Ljc3MDI2NCwgNTUwNS42Mjg5MDYpLAogICAgICAgIC0tICAgICBbIkNyeW9nZW5pYyBDYW5hbCJdID0gVmVjdG9yMy5uZXcoMjAzMDMuMTc3NzM0LCA3MDYuNTk4OTk5LCA1NzY3LjA3MzI0MiksCiAgICAgICAgLS0gICAgIFsiRnJpZ2lkIENhdmVybiJdID0gVmVjdG9yMy5uZXcoMTk3NTkuNzc3MzQ0LCA0MTUuNDM3MDczLCA1NDAyLjMyMDMxMiksCiAgICAgICAgLS0gICAgIFsiT3Zlckdyb3d0aCBDYXZlcyJdID0gVmVjdG9yMy5uZXcoMTk2NDAuNzkyOTY5LCAxMzEuNDIwMTA1LCA1MjQ5LjQzNDA4MiksCiAgICAgICAgLS0gICAgIFsiTG9hZGluZyJdID0gVmVjdG9yMy5uZXcoNDE4LjE2Mjg3MiwgLTIyMi45NzAzMzcsIDMxMC45MzA4MTcpLAogICAgICAgIC0tICAgICBbIkV4ZWN1dGl2ZSJdID0gVmVjdG9yMy5uZXcoLTMxLjQ4ODQ3MCwgLTI0Ni41OTk5OTEsIDIwMC4yNDM1NDYpCiAgICAgICAgLS0gfQogICAgICAgIAogICAgICAgIC0tIGxvY2FsIFBsYWNlc1RQRHJvcGRvd25VSSA9IFRhYnMuVGVsZXBvcnRzOkFkZERyb3Bkb3duKCJQbGFjZXNUUERyb3Bkb3duVUkiLCB7CiAgICAgICAgLS0gICAgIFRpdGxlID0gIlNlbGVjdCBMb2NhdGlvbiIsCiAgICAgICAgLS0gICAgIFZhbHVlcyA9IHsiTGV2ZWwgUHV6emxlIiwgIkdsYWNpYWwgR3JvdHRvIiwgIkNyeW9nZW5pYyBDYW5hbCIsICJGcmlnaWQgQ2F2ZXJuIiwgIk92ZXJHcm93dGggQ2F2ZXMiLCAiTG9hZGluZyIsICJFeGVjdXRpdmUifSwKICAgICAgICAtLSAgICAgTXVsdGkgPSBmYWxzZSwKICAgICAgICAtLSAgICAgRGVmYXVsdCA9IG5pbCwKICAgICAgICAtLSB9KQogICAgICAgIAogICAgICAgIC0tIFBsYWNlc1RQRHJvcGRvd25VSTpPbkNoYW5nZWQoZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgLS0gICAgIGxvY2FsIGNoYXJhY3RlciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICAtLSAgICAgaWYgY2hhcmFjdGVyIGFuZCBQbGFjZXNbVmFsdWVdIHRoZW4KICAgICAgICAtLSAgICAgICAgIGNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoUGxhY2VzW1ZhbHVlXSkKICAgICAgICAtLSAgICAgZW5kCiAgICAgICAgLS0gICAgIFBsYWNlc1RQRHJvcGRvd25VSTpTZXRWYWx1ZShuaWwpCiAgICAgICAgLS0gZW5kKQogICAgICAgIGxvY2FsIFRvdGVtVFBEcm9wZG93blVJID0gVGFicy5UZWxlcG9ydHM6QWRkRHJvcGRvd24oIlRvdGVtVFBEcm9wZG93blVJIiwgewogICAgICAgICAgICBUaXRsZSA9ICJTZWxlY3QgVG90ZW0iLAogICAgICAgICAgICBWYWx1ZXMgPSB7IkF1cm9yYSIsICJTdW5kaWFsIiwgIldpbmRzZXQiLCAiU21va2VzY3JlZW4iLCAiVGVtcGVzdCJ9LAogICAgICAgICAgICBNdWx0aSA9IGZhbHNlLAogICAgICAgICAgICBEZWZhdWx0ID0gbmlsLAogICAgICAgIH0pCiAgICAgICAgVG90ZW1UUERyb3Bkb3duVUk6T25DaGFuZ2VkKGZ1bmN0aW9uKFZhbHVlKQogICAgICAgICAgICBTZWxlY3RlZFRvdGVtID0gVmFsdWUKICAgICAgICAgICAgaWYgU2VsZWN0ZWRUb3RlbSA9PSAiQXVyb3JhIiB0aGVuCiAgICAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTE4MTEsIC0xMzcsIC0zMjgyKQogICAgICAgICAgICAgICAgVG90ZW1UUERyb3Bkb3duVUk6U2V0VmFsdWUobmlsKQogICAgICAgICAgICBlbHNlaWYgU2VsZWN0ZWRUb3RlbSA9PSAiU3VuZGlhbCIgdGhlbgogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KC0xMTQ4LCAxMzUsIC0xMDc1KQogICAgICAgICAgICAgICAgVG90ZW1UUERyb3Bkb3duVUk6U2V0VmFsdWUobmlsKQogICAgICAgICAgICBlbHNlaWYgU2VsZWN0ZWRUb3RlbSA9PSAiV2luZHNldCIgdGhlbgogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDI4NDksIDE3OCwgMjcwMikKICAgICAgICAgICAgICAgIFRvdGVtVFBEcm9wZG93blVJOlNldFZhbHVlKG5pbCkKICAgICAgICAgICAgZWxzZWlmIFNlbGVjdGVkVG90ZW0gPT0gIlNtb2tlc2NyZWVuIiB0aGVuCiAgICAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoMjc4OSwgMTQwLCAtNjI1KQogICAgICAgICAgICAgICAgVG90ZW1UUERyb3Bkb3duVUk6U2V0VmFsdWUobmlsKQogICAgICAgICAgICBlbHNlaWYgU2VsZWN0ZWRUb3RlbSA9PSAiVGVtcGVzdCIgdGhlbgogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KDM1LCAxMzMsIDE5NDMpCiAgICAgICAgICAgICAgICBUb3RlbVRQRHJvcGRvd25VSTpTZXRWYWx1ZShuaWwpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgICAgICAKICAgICAgICBsb2NhbCBXb3JsZEV2ZW50VFBEcm9wZG93blVJID0gVGFicy5UZWxlcG9ydHM6QWRkRHJvcGRvd24oIldvcmxkRXZlbnRUUERyb3Bkb3duVUkiLCB7CiAgICAgICAgICAgIFRpdGxlID0gIlNlbGVjdCBXb3JsZCBFdmVudCIsCiAgICAgICAgICAgIFZhbHVlcyA9IHsiU3RyYW5nZSBXaGlybHBvb2wiLCAiR3JlYXQgSGFtbWVyaGVhZCBTaGFyayIsICJHcmVhdCBXaGl0ZSBTaGFyayIsICJXaGFsZSBTaGFyayIsICJUaGUgRGVwdGhzIC0gU2VycGVudCJ9LAogICAgICAgICAgICBNdWx0aSA9IGZhbHNlLAogICAgICAgICAgICBEZWZhdWx0ID0gbmlsLAogICAgICAgIH0pCiAgICAgICAgV29ybGRFdmVudFRQRHJvcGRvd25VSTpPbkNoYW5nZWQoZnVuY3Rpb24oVmFsdWUpCiAgICAgICAgICAgIFNlbGVjdGVkV29ybGRFdmVudCA9IFZhbHVlCiAgICAgICAgICAgIGlmIFNlbGVjdGVkV29ybGRFdmVudCA9PSAiU3RyYW5nZSBXaGlybHBvb2wiIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIG9mZnNldCA9IFZlY3RvcjMubmV3KDI1LCAxMzUsIDI1KQogICAgICAgICAgICAgICAgbG9jYWwgV29ybGRFdmVudCA9IGdhbWUuV29ya3NwYWNlLnpvbmVzLmZpc2hpbmc6RmluZEZpcnN0Q2hpbGQoIklzb25hZGUiKQogICAgICAgICAgICAgICAgaWYgbm90IFdvcmxkRXZlbnQgdGhlbiBXb3JsZEV2ZW50VFBEcm9wZG93blVJOlNldFZhbHVlKG5pbCkgcmV0dXJuIFNob3dOb3RpZmljYXRpb24oIk5vdCBmb3VuZCBTdHJhbmdlIFdoaXJscG9vbCIpIGVuZAogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KGdhbWUuV29ya3NwYWNlLnpvbmVzLmZpc2hpbmcuSXNvbmFkZS5Qb3NpdGlvbiArIG9mZnNldCkgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBTdHJhbmdlIFdoaXJscG9vbAogICAgICAgICAgICAgICAgV29ybGRFdmVudFRQRHJvcGRvd25VSTpTZXRWYWx1ZShuaWwpCiAgICAgICAgICAgIGVsc2VpZiBTZWxlY3RlZFdvcmxkRXZlbnQgPT0gIkdyZWF0IEhhbW1lcmhlYWQgU2hhcmsiIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIG9mZnNldCA9IFZlY3RvcjMubmV3KDAsIDEzNSwgMCkKICAgICAgICAgICAgICAgIGxvY2FsIFdvcmxkRXZlbnQgPSBnYW1lLldvcmtzcGFjZS56b25lcy5maXNoaW5nOkZpbmRGaXJzdENoaWxkKCJHcmVhdCBIYW1tZXJoZWFkIFNoYXJrIikKICAgICAgICAgICAgICAgIGlmIG5vdCBXb3JsZEV2ZW50IHRoZW4gV29ybGRFdmVudFRQRHJvcGRvd25VSTpTZXRWYWx1ZShuaWwpIHJldHVybiBTaG93Tm90aWZpY2F0aW9uKCJOb3QgZm91bmQgR3JlYXQgSGFtbWVyaGVhZCBTaGFyayIpIGVuZAogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KGdhbWUuV29ya3NwYWNlLnpvbmVzLmZpc2hpbmdbIkdyZWF0IEhhbW1lcmhlYWQgU2hhcmsiXS5Qb3NpdGlvbiArIG9mZnNldCkgICAgICAgICAtLSBHcmVhdCBIYW1tZXJoZWFkIFNoYXJrCiAgICAgICAgICAgICAgICBXb3JsZEV2ZW50VFBEcm9wZG93blVJOlNldFZhbHVlKG5pbCkKICAgICAgICAgICAgZWxzZWlmIFNlbGVjdGVkV29ybGRFdmVudCA9PSAiR3JlYXQgV2hpdGUgU2hhcmsiIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIG9mZnNldCA9IFZlY3RvcjMubmV3KDAsIDEzNSwgMCkKICAgICAgICAgICAgICAgIGxvY2FsIFdvcmxkRXZlbnQgPSBnYW1lLldvcmtzcGFjZS56b25lcy5maXNoaW5nOkZpbmRGaXJzdENoaWxkKCJHcmVhdCBXaGl0ZSBTaGFyayIpCiAgICAgICAgICAgICAgICBpZiBub3QgV29ybGRFdmVudCB0aGVuIFdvcmxkRXZlbnRUUERyb3Bkb3duVUk6U2V0VmFsdWUobmlsKSByZXR1cm4gU2hvd05vdGlmaWNhdGlvbigiTm90IGZvdW5kIEdyZWF0IFdoaXRlIFNoYXJrIikgZW5kCiAgICAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoZ2FtZS5Xb3Jrc3BhY2Uuem9uZXMuZmlzaGluZ1siR3JlYXQgV2hpdGUgU2hhcmsiXS5Qb3NpdGlvbiArIG9mZnNldCkgICAgICAgICAgICAgICAtLSBHcmVhdCBXaGl0ZSBTaGFyawogICAgICAgICAgICAgICAgV29ybGRFdmVudFRQRHJvcGRvd25VSTpTZXRWYWx1ZShuaWwpCiAgICAgICAgICAgIGVsc2VpZiBTZWxlY3RlZFdvcmxkRXZlbnQgPT0gIldoYWxlIFNoYXJrIiB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBvZmZzZXQgPSBWZWN0b3IzLm5ldygwLCAxMzUsIDApCiAgICAgICAgICAgICAgICBsb2NhbCBXb3JsZEV2ZW50ID0gZ2FtZS5Xb3Jrc3BhY2Uuem9uZXMuZmlzaGluZzpGaW5kRmlyc3RDaGlsZCgiV2hhbGUgU2hhcmsiKQogICAgICAgICAgICAgICAgaWYgbm90IFdvcmxkRXZlbnQgdGhlbiBXb3JsZEV2ZW50VFBEcm9wZG93blVJOlNldFZhbHVlKG5pbCkgcmV0dXJuIFNob3dOb3RpZmljYXRpb24oIk5vdCBmb3VuZCBXaGFsZSBTaGFyayIpIGVuZAogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KGdhbWUuV29ya3NwYWNlLnpvbmVzLmZpc2hpbmdbIldoYWxlIFNoYXJrIl0uUG9zaXRpb24gKyBvZmZzZXQpICAgICAgICAgICAgICAgICAgICAgLS0gV2hhbGUgU2hhcmsKICAgICAgICAgICAgICAgIFdvcmxkRXZlbnRUUERyb3Bkb3duVUk6U2V0VmFsdWUobmlsKQogICAgICAgICAgICBlbHNlaWYgU2VsZWN0ZWRXb3JsZEV2ZW50ID09ICJUaGUgRGVwdGhzIC0gU2VycGVudCIgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgb2Zmc2V0ID0gVmVjdG9yMy5uZXcoMCwgNTAsIDApCiAgICAgICAgICAgICAgICBsb2NhbCBXb3JsZEV2ZW50ID0gZ2FtZS5Xb3Jrc3BhY2Uuem9uZXMuZmlzaGluZzpGaW5kRmlyc3RDaGlsZCgiVGhlIERlcHRocyAtIFNlcnBlbnQiKQogICAgICAgICAgICAgICAgaWYgbm90IFdvcmxkRXZlbnQgdGhlbiBXb3JsZEV2ZW50VFBEcm9wZG93blVJOlNldFZhbHVlKG5pbCkgcmV0dXJuIFNob3dOb3RpZmljYXRpb24oIk5vdCBmb3VuZCBUaGUgRGVwdGhzIC0gU2VycGVudCIpIGVuZAogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KGdhbWUuV29ya3NwYWNlLnpvbmVzLmZpc2hpbmdbIlRoZSBEZXB0aHMgLSBTZXJwZW50Il0uUG9zaXRpb24gKyBvZmZzZXQpICAgICAgICAgICAgLS0gVGhlIERlcHRocyAtIFNlcnBlbnQKICAgICAgICAgICAgICAgIFdvcmxkRXZlbnRUUERyb3Bkb3duVUk6U2V0VmFsdWUobmlsKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICAgICAgVGFicy5UZWxlcG9ydHM6QWRkQnV0dG9uKHsKICAgICAgICAgICAgVGl0bGUgPSAiVGVsZXBvcnQgdG8gVHJhdmVsZXIgTWVyY2hhbnQiLAogICAgICAgICAgICBEZXNjcmlwdGlvbiA9ICJUZWxlcG9ydHMgdG8gdGhlIFRyYXZlbGVyIE1lcmNoYW50LiIsCiAgICAgICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgTWVyY2hhbnQgPSBnYW1lLldvcmtzcGFjZS5hY3RpdmU6RmluZEZpcnN0Q2hpbGQoIk1lcmNoYW50IEJvYXQiKQogICAgICAgICAgICAgICAgaWYgbm90IE1lcmNoYW50IHRoZW4gcmV0dXJuIFNob3dOb3RpZmljYXRpb24oIk5vdCBmb3VuZCBNZXJjaGFudCIpIGVuZAogICAgICAgICAgICAgICAgSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBDRnJhbWUubmV3KGdhbWUuV29ya3NwYWNlLmFjdGl2ZVsiTWVyY2hhbnQgQm9hdCJdLkJvYXRbIk1lcmNoYW50IEJvYXQiXS5yLkhhbmRsZXNSLlBvc2l0aW9uKQogICAgICAgICAgICBlbmQKICAgICAgICB9KQogICAgICAgIFRhYnMuVGVsZXBvcnRzOkFkZEJ1dHRvbih7CiAgICAgICAgICAgIFRpdGxlID0gIkNyZWF0ZSBTYWZlIFpvbmUiLAogICAgICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvY2FsIFNhZmVab25lID0gSW5zdGFuY2UubmV3KCJQYXJ0IikKICAgICAgICAgICAgICAgIFNhZmVab25lLlNpemUgPSBWZWN0b3IzLm5ldygzMCwgMSwgMzApCiAgICAgICAgICAgICAgICBTYWZlWm9uZS5Qb3NpdGlvbiA9IFZlY3RvcjMubmV3KG1hdGgucmFuZG9tKC0yMDAwLDIwMDApLCBtYXRoLnJhbmRvbSg1MDAwMCw5MDAwMCksIG1hdGgucmFuZG9tKC0yMDAwLDIwMDApKQogICAgICAgICAgICAgICAgU2FmZVpvbmUuQW5jaG9yZWQgPSB0cnVlCiAgICAgICAgICAgICAgICBTYWZlWm9uZS5Ccmlja0NvbG9yID0gQnJpY2tDb2xvci5uZXcoIkJyaWdodCBwdXJwbGUiKQogICAgICAgICAgICAgICAgU2FmZVpvbmUuTWF0ZXJpYWwgPSBFbnVtLk1hdGVyaWFsLkZvcmNlRmllbGQKICAgICAgICAgICAgICAgIFNhZmVab25lLlBhcmVudCA9IGdhbWUuV29ya3NwYWNlCiAgICAgICAgICAgICAgICBIdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IFNhZmVab25lLkNGcmFtZSArIFZlY3RvcjMubmV3KDAsIDUsIDApCiAgICAgICAgICAgIGVuZAogICAgICAgIH0pCgogICAgICAgIC0tIC8vIENoYXJhY3RlciBUYWIgLy8gLS0KICAgICAgICBsb2NhbCBJZGVudGl0eUhpZGVyVUkgPSBUYWJzLkNoYXJhY3RlclRhYjpBZGRUb2dnbGUoIklkZW50aXR5SGlkZXJVSSIsIHtUaXRsZSA9ICJQcm90ZWN0IElkZW50aXR5IiwgRGVmYXVsdCA9IGZhbHNlfSkKICAgICAgICBJZGVudGl0eUhpZGVyVUk6T25DaGFuZ2VkKGZ1bmN0aW9uKCkKICAgICAgICAgICAgd2hpbGUgT3B0aW9ucy5JZGVudGl0eUhpZGVyVUkuVmFsdWUgPT0gdHJ1ZSBkbwogICAgICAgICAgICAgICAgLS0gVXBkYXRlIGVsZW1lbiBVSSBkZW5nYW4gd2FybmEgeWFuZyBsZWJpaCBlbGVnYW4gZGFuIHRpZGFrIG1lbmNvbG9rCiAgICAgICAgICAgICAgICBpZiBVc2VyUGxheWVyOkZpbmRGaXJzdENoaWxkKCJzdHJlYWsiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgVXNlclBsYXllci5zdHJlYWsuVGV4dCA9ICJBbmNlc3RyYWwiCiAgICAgICAgICAgICAgICAgICAgVXNlclBsYXllci5zdHJlYWsuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDE4MCwgMTgwLCAxODApIC0tIEFidS1hYnUgbWVkaXVtLCBsZWJpaCBzb2Z0CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGlmIFVzZXJQbGF5ZXI6RmluZEZpcnN0Q2hpbGQoImxldmVsIikgdGhlbgogICAgICAgICAgICAgICAgICAgIFVzZXJQbGF5ZXIubGV2ZWwuVGV4dCA9ICJBbmNlc3RyYWwiCiAgICAgICAgICAgICAgICAgICAgVXNlclBsYXllci5sZXZlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTQwLCAxNDAsIDIyMCkgLS0gQmlydSBwYXN0ZWwgeWFuZyBsZWJpaCBrYWxlbQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiBVc2VyUGxheWVyOkZpbmRGaXJzdENoaWxkKCJ1c2VyIikgdGhlbgogICAgICAgICAgICAgICAgICAgIFVzZXJQbGF5ZXIudXNlci5UZXh0ID0gIkFuY2VzdHJhbCBQcm90ZWN0IgogICAgICAgICAgICAgICAgICAgIFVzZXJQbGF5ZXIudXNlci5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTYwLCAxNjAsIDE2MCkgLS0gQWJ1LWFidSB5YW5nIGxlYmloIHNlaW1iYW5nCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGh1ZCA9IExvY2FsUGxheWVyOldhaXRGb3JDaGlsZCgiUGxheWVyR3VpIik6V2FpdEZvckNoaWxkKCJodWQiKTpXYWl0Rm9yQ2hpbGQoInNhZmV6b25lIikKICAgICAgICAgICAgICAgIGlmIGh1ZDpGaW5kRmlyc3RDaGlsZCgiY29pbnMiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgaHVkLmNvaW5zLlRleHQgPSAiSElEREVOIgogICAgICAgICAgICAgICAgICAgIGh1ZC5jb2lucy5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjM1LCAyMTAsIDE1MCkgLS0gS3VuaW5nIGVtYXMgbGVtYnV0LCBsZWJpaCBlbGVnYW4KICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgaHVkOkZpbmRGaXJzdENoaWxkKCJsdmwiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgaHVkLmx2bC5UZXh0ID0gIkFuY2VzdHJhbCBNQVgiCiAgICAgICAgICAgICAgICAgICAgaHVkLmx2bC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTkwLCAxNzAsIDIzMCkgLS0gVW5ndSBwYXN0ZWwgbGVtYnV0CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjAxKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpICAgIAogICAgbG9jYWwgV2Fsa09uV2F0ZXIgPSBUYWJzLkNoYXJhY3RlclRhYjpBZGRUb2dnbGUoIldhbGtPbldhdGVyIiwge1RpdGxlID0gIldhbGsgT24gV2F0ZXIiLCBEZWZhdWx0ID0gZmFsc2UgfSkKICAgIFdhbGtPbldhdGVyOk9uQ2hhbmdlZChmdW5jdGlvbigpCiAgICAgICAgZm9yIF8sIHYgaW4gcGFpcnMod29ya3NwYWNlLnpvbmVzLmZpc2hpbmc6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgaWYgdi5OYW1lID09IFdhbGtab25lIHRoZW4KICAgICAgICAgICAgICAgIHYuQ2FuQ29sbGlkZSA9IE9wdGlvbnMuV2Fsa09uV2F0ZXIuVmFsdWUKICAgICAgICAgICAgICAgIGlmIHYuTmFtZSA9PSAiT2NlYW4iIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgXywgdiBpbiBwYWlycyh3b3Jrc3BhY2Uuem9uZXMuZmlzaGluZzpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiB2Lk5hbWUgPT0gIkRlZXAgT2NlYW4iIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuQ2FuQ29sbGlkZSA9IE9wdGlvbnMuV2Fsa09uV2F0ZXIuVmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgbG9jYWwgV2Fsa09uV2F0ZXJab25lID0gVGFicy5DaGFyYWN0ZXJUYWI6QWRkRHJvcGRvd24oIldhbGtPbldhdGVyWm9uZSIsIHsKICAgICAgICBUaXRsZSA9ICJXYWxrIE9uIFdhdGVyIFpvbmUiLAogICAgICAgIFZhbHVlcyA9IHsiT2NlYW4iLCAiRGVzb2xhdGUgRGVlcCIsICJUaGUgRGVwdGhzIn0sCiAgICAgICAgTXVsdGkgPSBmYWxzZSwKICAgICAgICBEZWZhdWx0ID0gIk9jZWFuIiwKICAgIH0pCiAgICBXYWxrT25XYXRlclpvbmU6T25DaGFuZ2VkKGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIFdhbGtab25lID0gVmFsdWUKICAgIGVuZCkKCiAgICBsb2NhbCBXYWxrU3BlZWRTbGlkZXJVSSA9IFRhYnMuQ2hhcmFjdGVyVGFiOkFkZFNsaWRlcigiV2Fsa1NwZWVkU2xpZGVyVUkiLCB7CiAgICAgICAgVGl0bGUgPSAiV2FsayBTcGVlZCIsCiAgICAgICAgTWluID0gMTYsCiAgICAgICAgTWF4ID0gMjAwLAogICAgICAgIERlZmF1bHQgPSAxNiwKICAgICAgICBSb3VuZGluZyA9IDEsCiAgICB9KQogICAgV2Fsa1NwZWVkU2xpZGVyVUk6T25DaGFuZ2VkKGZ1bmN0aW9uKHZhbHVlKQogICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5XYWxrU3BlZWQgPSB2YWx1ZQogICAgZW5kKQoKICAgIGxvY2FsIEp1bXBIZWlnaHRTbGlkZXJVSSA9IFRhYnMuQ2hhcmFjdGVyVGFiOkFkZFNsaWRlcigiSnVtcEhlaWdodFNsaWRlclVJIiwgewogICAgICAgIFRpdGxlID0gIkp1bXAgSGVpZ2h0IiwKICAgICAgICBNaW4gPSA1MCwKICAgICAgICBNYXggPSAyMDAsCiAgICAgICAgRGVmYXVsdCA9IDUwLAogICAgICAgIFJvdW5kaW5nID0gMSwKICAgIH0pCiAgICBKdW1wSGVpZ2h0U2xpZGVyVUk6T25DaGFuZ2VkKGZ1bmN0aW9uKHZhbHVlKQogICAgICAgIExvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5KdW1wUG93ZXIgPSB2YWx1ZQogICAgZW5kKQoKICAgIC0tIC8vIFVzZWZ1bCBGZWF0dXJlcyBTZWN0aW9uIC8vIC0tCiAgICBsb2NhbCB1c2VmdWxTZWN0aW9uID0gVGFicy5DaGFyYWN0ZXJUYWI6QWRkU2VjdGlvbigiVXNlZnVsIEZlYXR1cmVzIikKCiAgICBsb2NhbCBBbnRpQUZLID0gdXNlZnVsU2VjdGlvbjpBZGRUb2dnbGUoIkFudGlBRksiLCB7VGl0bGUgPSAiQW50aS1BRksiLCBEZWZhdWx0ID0gdHJ1ZX0pCiAgICBBbnRpQUZLOk9uQ2hhbmdlZChmdW5jdGlvbihtKQogICAgICAgIGlmIG0gdGhlbgogICAgICAgICAgICBsb2NhbCB2aXJ0dWFsVXNlciA9IGdhbWU6R2V0U2VydmljZSgiVmlydHVhbFVzZXIiKQogICAgICAgICAgICBMb2NhbFBsYXllci5JZGxlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIHZpcnR1YWxVc2VyOkNhcHR1cmVDb250cm9sbGVyKCkKICAgICAgICAgICAgICAgIHZpcnR1YWxVc2VyOkNsaWNrQnV0dG9uMihWZWN0b3IyLm5ldygpKQogICAgICAgICAgICBlbmQpCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgbG9jYWwgSW5maW5pdGVPeHlnZW4gPSB1c2VmdWxTZWN0aW9uOkFkZFRvZ2dsZSgiSW5maW5pdGVPeHlnZW4iLCB7VGl0bGUgPSAiSW5maW5pdGUgT3h5Z2VuIiwgRGVmYXVsdCA9IGZhbHNlfSkKICAgIEluZmluaXRlT3h5Z2VuOk9uQ2hhbmdlZChmdW5jdGlvbihtKQogICAgICAgIGlmIG0gdGhlbgogICAgICAgICAgICBsb2NhbCBkaXZpbmdUYW5rID0gSW5zdGFuY2UubmV3KCJHbHVlIikKICAgICAgICAgICAgZGl2aW5nVGFuay5OYW1lID0gIkRpdmluZ1RhbmsiCiAgICAgICAgICAgIGRpdmluZ1Rhbms6U2V0QXR0cmlidXRlKCJUaWVyIiwgOWU5KQogICAgICAgICAgICBkaXZpbmdUYW5rLlBhcmVudCA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgIGVsc2UKICAgICAgICAgICAgbG9jYWwgZXhpc3RpbmdUYW5rID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJEaXZpbmdUYW5rIikKICAgICAgICAgICAgaWYgZXhpc3RpbmdUYW5rIHRoZW4gZXhpc3RpbmdUYW5rOkRlc3Ryb3koKSBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKICAgICAgICAtLSAvLyBNaXNjIFRhYiAvLyAtLQogICAgICAgIGxvY2FsIHNlY3Rpb24gPSBUYWJzLk1pc2M6QWRkU2VjdGlvbigiTWlzYyIpCiAgICAgICAgbG9jYWwgQnlwYXNzUmFkYXIgPSBUYWJzLk1pc2M6QWRkVG9nZ2xlKCJCeXBhc3NSYWRhciIsIHtUaXRsZSA9ICJCeXBhc3MgRmlzaCBSYWRhciIsIERlZmF1bHQgPSBmYWxzZSB9KQogICAgICAgIEJ5cGFzc1JhZGFyOk9uQ2hhbmdlZChmdW5jdGlvbigpCiAgICAgICAgICAgIGZvciBfLCB2IGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiQ29sbGVjdGlvblNlcnZpY2UiKTpHZXRUYWdnZWQoInJhZGFyVGFnIikpIGRvCiAgICAgICAgICAgICAgICBpZiB2OklzQSgiQmlsbGJvYXJkR3VpIikgb3IgdjpJc0EoIlN1cmZhY2VHdWkiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgdi5FbmFibGVkID0gT3B0aW9ucy5CeXBhc3NSYWRhci5WYWx1ZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgICAgICAtLSBsb2NhbCBCeXBhc3NHUFMgPSBUYWJzLk1pc2M6QWRkVG9nZ2xlKCJCeXBhc3NHUFMiLCB7VGl0bGUgPSAiQnlwYXNzIEdQUyIsIERlZmF1bHQgPSBmYWxzZSB9KQogICAgICAgIC0tIEJ5cGFzc0dQUzpPbkNoYW5nZWQoZnVuY3Rpb24oKQogICAgICAgIC0tICAgICBpZiBPcHRpb25zLkJ5cGFzc0dQUy5WYWx1ZSA9PSB0cnVlIHRoZW4KICAgICAgICAtLSAgICAgICAgIGxvY2FsIFh5ekNsb25lID0gZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLnJlc291cmNlcy5pdGVtcy5pdGVtcy5HUFMuR1BTLmdwc01haW4ueHl6OkNsb25lKCkKICAgICAgICAtLSAJCVh5ekNsb25lLlBhcmVudCA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5QbGF5ZXJHdWk6V2FpdEZvckNoaWxkKCJodWQiKTpXYWl0Rm9yQ2hpbGQoInNhZmV6b25lIik6V2FpdEZvckNoaWxkKCJiYWNrcGFjayIpCiAgICAgICAgLS0gCQlsb2NhbCBQb3MgPSBHZXRQb3NpdGlvbigpCiAgICAgICAgLS0gCQlsb2NhbCBTdHJpbmdJbnB1dCA9IHN0cmluZy5mb3JtYXQoIiVzLCAlcywgJXMiLCBFeHBvcnRWYWx1ZShQb3NbMV0pLCBFeHBvcnRWYWx1ZShQb3NbMl0pLCBFeHBvcnRWYWx1ZShQb3NbM10pKQogICAgICAgIC0tIAkJWHl6Q2xvbmUuVGV4dCA9ICI8Zm9udCBjb2xvcj0nI2ZmNDk0OSc+WDwvZm9udD48Zm9udCBjb2xvciA9ICcjYTNmZjgxJz5ZPC9mb250Pjxmb250IGNvbG9yID0gJyM2MjZhZmYnPlo8L2ZvbnQ+OiAiLi5TdHJpbmdJbnB1dAogICAgICAgIC0tIAkJQnlwYXNzR3BzTG9vcCA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAtLSAJCQlsb2NhbCBQb3MgPSBHZXRQb3NpdGlvbigpCiAgICAgICAgLS0gCQkJU3RyaW5nSW5wdXQgPSBzdHJpbmcuZm9ybWF0KCIlcywgJXMsICVzIiwgRXhwb3J0VmFsdWUoUG9zWzFdKSwgRXhwb3J0VmFsdWUoUG9zWzJdKSwgRXhwb3J0VmFsdWUoUG9zWzNdKSkKICAgICAgICAtLSAJCQlYeXpDbG9uZS5UZXh0ID0gIjxmb250IGNvbG9yPScjZmY0OTQ5Jz5YPC9mb250Pjxmb250IGNvbG9yID0gJyNhM2ZmODEnPlk8L2ZvbnQ+PGZvbnQgY29sb3IgPSAnIzYyNmFmZic+WjwvZm9udD4gOiAiLi5TdHJpbmdJbnB1dAogICAgICAgIC0tIAkJZW5kKQogICAgICAgIC0tIAllbHNlCiAgICAgICAgLS0gCQlpZiBQbGF5ZXJHdWkuaHVkLnNhZmV6b25lLmJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJ4eXoiKSB0aGVuCiAgICAgICAgLS0gCQkJUGxheWVyR3VpLmh1ZC5zYWZlem9uZS5iYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgieHl6Iik6RGVzdHJveSgpCiAgICAgICAgLS0gCQllbmQKICAgICAgICAtLSAJCWlmIEJ5cGFzc0dwc0xvb3AgdGhlbgogICAgICAgIC0tIAkJCUJ5cGFzc0dwc0xvb3A6RGlzY29ubmVjdCgpCiAgICAgICAgLS0gCQkJQnlwYXNzR3BzTG9vcCA9IG5pbAogICAgICAgIC0tIAkJZW5kCiAgICAgICAgLS0gICAgIGVuZAogICAgICAgIC0tIGVuZCkKICAgICAgICBsb2NhbCBSZW1vdmVGb2cgPSBUYWJzLk1pc2M6QWRkVG9nZ2xlKCJSZW1vdmVGb2ciLCB7VGl0bGUgPSAiUmVtb3ZlIEZvZyIsIERlZmF1bHQgPSBmYWxzZSB9KQogICAgICAgIFJlbW92ZUZvZzpPbkNoYW5nZWQoZnVuY3Rpb24oKQogICAgICAgICAgICBpZiBPcHRpb25zLlJlbW92ZUZvZy5WYWx1ZSA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiTGlnaHRpbmciKTpGaW5kRmlyc3RDaGlsZCgiU2t5IikgdGhlbgogICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiTGlnaHRpbmciKTpGaW5kRmlyc3RDaGlsZCgiU2t5IikuUGFyZW50ID0gZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpLmJsb29tCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpLmJsb29tOkZpbmRGaXJzdENoaWxkKCJTa3kiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpLmJsb29tOkZpbmRGaXJzdENoaWxkKCJTa3kiKS5QYXJlbnQgPSBnYW1lOkdldFNlcnZpY2UoIkxpZ2h0aW5nIikKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICAgICAgbG9jYWwgRGF5T25seSA9IFRhYnMuTWlzYzpBZGRUb2dnbGUoIkRheU9ubHkiLCB7VGl0bGUgPSAiRGF5IE9ubHkiLCBEZWZhdWx0ID0gZmFsc2UgfSkKICAgICAgICBEYXlPbmx5Ok9uQ2hhbmdlZChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIE9wdGlvbnMuRGF5T25seS5WYWx1ZSA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgIERheU9ubHlMb29wID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpLlRpbWVPZkRheSA9ICIxMjowMDowMCIKICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgaWYgRGF5T25seUxvb3AgdGhlbgogICAgICAgICAgICAgICAgICAgIERheU9ubHlMb29wOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgICAgIERheU9ubHlMb29wID0gbmlsCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgICAgIC0tIGxvY2FsIEhvbGREdXJhdGlvbiA9IFRhYnMuTWlzYzpBZGRUb2dnbGUoIkhvbGREdXJhdGlvbiIsIHtUaXRsZSA9ICJIb2xkIER1cmF0aW9uIDAgc2VjIiwgRGVmYXVsdCA9IGZhbHNlIH0pCiAgICAgICAgLS0gSG9sZER1cmF0aW9uOk9uQ2hhbmdlZChmdW5jdGlvbigpCiAgICAgICAgLS0gICAgIGlmIE9wdGlvbnMuSG9sZER1cmF0aW9uLlZhbHVlID09IHRydWUgdGhlbgogICAgICAgIC0tICAgICAgICAgZm9yIGksdiBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKTpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgIC0tICAgICAgICAgICAgIGlmIHYuQ2xhc3NOYW1lID09ICJQcm94aW1pdHlQcm9tcHQiIHRoZW4KICAgICAgICAtLSAgICAgICAgICAgICAgICAgdi5Ib2xkRHVyYXRpb24gPSAwCiAgICAgICAgLS0gICAgICAgICAgICAgZW5kCiAgICAgICAgLS0gICAgICAgICBlbmQKICAgICAgICAtLSAgICAgZW5kCiAgICAgICAgLS0gZW5kKQogICAgICAgIC0tIGxvY2FsIERpc2FibGVPeHlnZW4gPSBUYWJzLk1pc2M6QWRkVG9nZ2xlKCJEaXNhYmxlT3h5Z2VuIiwge1RpdGxlID0gIkRpc2FibGUgT3h5Z2VuIiwgRGVmYXVsdCA9IHRydWUgfSkKICAgICAgICAtLSBEaXNhYmxlT3h5Z2VuOk9uQ2hhbmdlZChmdW5jdGlvbigpCiAgICAgICAgLS0gICAgIExvY2FsUGxheWVyLkNoYXJhY3Rlci5jbGllbnQub3h5Z2VuLkRpc2FibGVkID0gT3B0aW9ucy5EaXNhYmxlT3h5Z2VuLlZhbHVlCiAgICAgICAgLS0gZW5kKQogICAgICAgIGxvY2FsIEp1c3RVSSA9IFRhYnMuTWlzYzpBZGRUb2dnbGUoIkp1c3RVSSIsIHtUaXRsZSA9ICJTaG93L0hpZGUgVUlzIiwgRGVmYXVsdCA9IHRydWUgfSkKICAgICAgICBKdXN0VUk6T25DaGFuZ2VkKGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwgQmxhY2tTaG93ID0gSnVzdFVJLlZhbHVlCiAgICAgICAgICAgIGlmIEJsYWNrU2hvdyB0aGVuCiAgICAgICAgICAgICAgICBQbGF5ZXJHdWkuaHVkLnNhZmV6b25lLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIFBsYXllckd1aS5odWQuc2FmZXpvbmUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgICAgICAtLSAvLyAvLyAvLyBPcHRpbWl6ZWQgRlBTIEJvb3N0IC8vIC8vIC8vIC0tCiAgICBsb2NhbCBmdW5jdGlvbiBvcHRpbWl6ZUZQUygpCiAgICAgICAgbG9jYWwgd29ya3NwYWNlID0gZ2FtZS5Xb3Jrc3BhY2UKICAgICAgICBsb2NhbCBsaWdodGluZyA9IGdhbWUuTGlnaHRpbmcKICAgICAgICBsb2NhbCB0ZXJyYWluID0gd29ya3NwYWNlLlRlcnJhaW4KICAgICAgICAKICAgICAgICAtLSBPcHRpbWl6ZSB0ZXJyYWluIHdhdGVyIHByb3BlcnRpZXMKICAgICAgICB0ZXJyYWluLldhdGVyV2F2ZVNpemUgPSAwCiAgICAgICAgdGVycmFpbi5XYXRlcldhdmVTcGVlZCA9IDAKICAgICAgICB0ZXJyYWluLldhdGVyUmVmbGVjdGFuY2UgPSAwCiAgICAgICAgdGVycmFpbi5XYXRlclRyYW5zcGFyZW5jeSA9IDEKICAgICAgICAKICAgICAgICAtLSBPcHRpbWl6ZSBsaWdodGluZyBzZXR0aW5ncwogICAgICAgIGxpZ2h0aW5nLkdsb2JhbFNoYWRvd3MgPSBmYWxzZQogICAgICAgIGxpZ2h0aW5nLkZvZ0VuZCA9IDg5OTk5OTk0ODgKICAgICAgICBsaWdodGluZy5CcmlnaHRuZXNzID0gMAogICAgICAgIHNldHRpbmdzKCkuUmVuZGVyaW5nLlF1YWxpdHlMZXZlbCA9ICJMZXZlbDAxIgogICAgICAgIAogICAgICAgIC0tIE9wdGltaXplIGdhbWUgZWxlbWVudHMKICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKGdhbWU6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgaWYgb2JqOklzQSgiQmFzZVBhcnQiKSBvciBvYmo6SXNBKCJNZXNoUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgIG9iai5NYXRlcmlhbCA9ICJTbW9vdGhQbGFzdGljIgogICAgICAgICAgICAgICAgb2JqLlJlZmxlY3RhbmNlID0gMAogICAgICAgICAgICAgICAgb2JqLkNhc3RTaGFkb3cgPSBmYWxzZQogICAgICAgICAgICBlbHNlaWYgb2JqOklzQSgiRGVjYWwiKSB0aGVuCiAgICAgICAgICAgICAgICBvYmouVHJhbnNwYXJlbmN5ID0gMQogICAgICAgICAgICBlbHNlaWYgb2JqOklzQSgiUGFydGljbGVFbWl0dGVyIikgb3Igb2JqOklzQSgiVHJhaWwiKSB0aGVuCiAgICAgICAgICAgICAgICBvYmouTGlmZXRpbWUgPSBOdW1iZXJSYW5nZS5uZXcoMCkKICAgICAgICAgICAgZWxzZWlmIG9iajpJc0EoIkV4cGxvc2lvbiIpIHRoZW4KICAgICAgICAgICAgICAgIG9iai5CbGFzdFByZXNzdXJlID0gMQogICAgICAgICAgICAgICAgb2JqLkJsYXN0UmFkaXVzID0gMQogICAgICAgICAgICBlbHNlaWYgb2JqOklzQSgiRmlyZSIpIG9yIG9iajpJc0EoIlNwb3RMaWdodCIpIG9yIG9iajpJc0EoIlNtb2tlIikgdGhlbgogICAgICAgICAgICAgICAgb2JqLkVuYWJsZWQgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICAKICAgICAgICAtLSBEaXNhYmxlIHBvc3QtcHJvY2Vzc2luZyBlZmZlY3RzCiAgICAgICAgZm9yIF8sIGVmZmVjdCBpbiBwYWlycyhsaWdodGluZzpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICBpZiBlZmZlY3Q6SXNBKCJQb3N0RWZmZWN0Iikgb3IgZWZmZWN0OklzQSgiRGVwdGhPZkZpZWxkRWZmZWN0IikgdGhlbgogICAgICAgICAgICAgICAgZWZmZWN0LkVuYWJsZWQgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIC0tIEFkZCBwZXJmb3JtYW5jZSBidXR0b24KICAgIFRhYnMuTWlzYzpBZGRCdXR0b24oewogICAgICAgIFRpdGxlID0gIjEtQ2xpY2sgRlBTIEJvb3N0IiwKICAgICAgICBEZXNjcmlwdGlvbiA9ICJJbXByb3ZlcyBGUFMgYnkgYXBwbHlpbmcgb3B0aW1pemF0aW9ucy4iLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICBvcHRpbWl6ZUZQUygpCiAgICAgICAgZW5kCiAgICB9KQoKICAgICAgICBUYWJzLk1pc2M6QWRkQnV0dG9uKHsKICAgICAgICAgICAgVGl0bGUgPSAiQ29weSBDb29yZGluYXQiLAogICAgICAgICAgICBEZXNjcmlwdGlvbiA9ICJDb3B5IHRvIHNlZSB5b3VyIENvb3JkaW5hdCIsCiAgICAgICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgbG9jYWwgcGxheWVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCiAgICAgICAgICAgICAgICBpZiBwbGF5ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgWFlaID0gcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgY29vcmRTdHJpbmcgPSBzdHJpbmcuZm9ybWF0KCJnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyglZiwgJWYsICVmKSIsIFhZWi5YLCBYWVouWSwgWFlaLlopCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLS0gTWVueWFsaW4ga29vcmRpbmF0IGtlIGNsaXBib2FyZAogICAgICAgICAgICAgICAgICAgIHNldGNsaXBib2FyZChjb29yZFN0cmluZykKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAtLSBNZW5hbXBpbGthbiBub3RpZmlrYXNpCiAgICAgICAgICAgICAgICAgICAgRmx1ZW50Ok5vdGlmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlID0gIkFuY2VzdHJhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiQ29vcmRpbmF0ZXMgY29waWVkIHRvIGNsaXBib2FyZCEiLAogICAgICAgICAgICAgICAgICAgICAgICBEdXJhdGlvbiA9IDgKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIEZsdWVudDpOb3RpZnkoewogICAgICAgICAgICAgICAgICAgICAgICBUaXRsZSA9ICJFcnJvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRlbnQgPSAiRmFpbGVkIHRvIGdldCBjb29yZGluYXRlcyEiLAogICAgICAgICAgICAgICAgICAgICAgICBEdXJhdGlvbiA9IDUKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIH0pCiAgICAgICAgLS0gLy8gTG9hZCBUYWIgLy8gLS0KICAgICAgICBsb2NhbCBzZWN0aW9uID0gVGFicy5NaXNjOkFkZFNlY3Rpb24oIkxvYWQgU2NyaXB0cyIpCiAgICAgICAgVGFicy5NaXNjOkFkZEJ1dHRvbih7CiAgICAgICAgICAgIFRpdGxlID0gIkxvYWQgSW5maW5pdGUtWWllbGQgRkUiLAogICAgICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCdodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vRWRnZUlZL2luZmluaXRleWllbGQvbWFzdGVyL3NvdXJjZScpKSgpCiAgICAgICAgICAgIGVuZAogICAgICAgIH0pCiAgICAgICAgVGFicy5NaXNjOkFkZEJ1dHRvbih7CiAgICAgICAgICAgIFRpdGxlID0gIkxvYWQgUmVtb3RlU3B5IiwKICAgICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldEFzeW5jKCJodHRwczovL2dpdGh1Yi5jb20vcmljaGllMDg2Ni9yZW1vdGUtc3B5L3JlbGVhc2VzL2xhdGVzdC9kb3dubG9hZC9SZW1vdGVTcHkubHVhIikpKCkKICAgICAgICAgICAgZW5kCiAgICAgICAgfSkKICAgICAgICBUYWJzLk1pc2M6QWRkQnV0dG9uKHsKICAgICAgICAgICAgVGl0bGUgPSAiTG9hZCBPbGRTZXJ2ZXItRmluZGVyIiwKICAgICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldEFzeW5jKCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vU3BlY3RydW0tVHJhc2gvQWRkb25zL3JlZnMvaGVhZHMvbWFpbi9GaW5kU2VydmVyLmx1YSIpKSgpCiAgICAgICAgICAgIGVuZAogICAgICAgIH0pCgogICAgICAgIGxvY2FsIHNlY3Rpb24gPSBUYWJzLkF1dG9tYXRpY2FsbHk6QWRkU2VjdGlvbigiU29ycnkgSSBEaXNhYmxlIFRoaXMgVG8gUmVtYWtlIikKICAgIGVuZAogICAgbG9jYWwgc2VjdGlvbiA9IFRhYnMuU2V0dGluZzpBZGRTZWN0aW9uKCJTZXR0aW5ncyIpCiAgICBXaW5kb3c6U2VsZWN0VGFiKDEpCiAgICBGbHVlbnQ6Tm90aWZ5KHsKICAgICAgICBUaXRsZSA9ICJBbmNlc3RyYWwiLAogICAgICAgIENvbnRlbnQgPSAiRXhlY3V0ZWQhIiwKICAgICAgICBEdXJhdGlvbiA9IDgKICAgIH0p"
local executed_code = decodeScript(secure_code)

local function runSecurely(code)
    local success, err = pcall(function()
        loadstring(code)()
    end)
    if not success then
        error("Execution failed!")
    end
end

runSecurely(executed_code)
